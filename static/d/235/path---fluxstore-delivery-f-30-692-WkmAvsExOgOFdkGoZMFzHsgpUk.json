{"data":{"site":{"siteMetadata":{"siteUrl":"http://ghost.local:8000","title":"InspireUI Document","description":"InspireUI document"}},"markdownRemark":{"frontmatter":{"title":"Delivery","date":null,"date_pretty":null,"path":null,"meta_title":"FluxStore - Universal mobile commerce Flutter app for Magento, WooCommerce and Opencart","meta_description":"Fluxstore is universal app that fully integration with the Woocommerce, Mangeto and Opencart","image":null,"next":null,"sidebar":"fluxstore","toc":null,"keywords":["fluxstore","flutter app","fluxstore","Magento app","Woo Commerce app","Opencart app"]},"html":"<p>Follow continuous delivery best practices with Flutter to make sure your application is delivered to your beta testers and validated on a frequent basis without resorting to manual workflows.</p>\n<h2 id=\"fastlane\"><a href=\"#fastlane\" aria-label=\"fastlane permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>fastlane</h2>\n<p>This guide shows how to integrate <a href=\"https://docs.fastlane.tools/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fastlane</a>, an open-source tool suite, with your existing testing and continuous integration (CI) workflows (for example, Travis or Cirrus).</p>\n<h3 id=\"local-setup\"><a href=\"#local-setup\" aria-label=\"local setup permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Local setup</h3>\n<p>It’s recommended that you test the build and deployment process locally before migrating to a cloud-based system. You could also choose to perform continuous delivery from a local machine.</p>\n<ol>\n<li>\n<p>Install fastlane <code class=\"language-text\">gem install fastlane</code> or <code class=\"language-text\">brew cask install fastlane</code>.</p>\n</li>\n<li>\n<p>Create your Flutter project, and when ready, make sure that your project builds via</p>\n<ul>\n<li><img src=\"https://flutter.dev/images/cd/android.png\" alt=\"Android\"> <code class=\"language-text\">flutter build apk --release</code>; and</li>\n<li><img src=\"https://flutter.dev/images/cd/ios.png\" alt=\"iOS\"> <code class=\"language-text\">flutter build ios --release --no-codesign</code>.</li>\n</ul>\n</li>\n<li>\n<p>Initialize the fastlane projects for each platform.</p>\n<ul>\n<li><img src=\"https://flutter.dev/images/cd/android.png\" alt=\"Android\"> In your <code class=\"language-text\">[project]/android</code> directory, run <code class=\"language-text\">fastlane init</code>.</li>\n<li><img src=\"https://flutter.dev/images/cd/ios.png\" alt=\"iOS\"> In your <code class=\"language-text\">[project]/ios</code> directory, run <code class=\"language-text\">fastlane init</code>.</li>\n</ul>\n</li>\n<li>\n<p>Edit the</p>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Appfile</code></pre></div>\n<p>   s to ensure they have adequate metadata for your app.</p>\n<ul>\n<li>\n<p><img src=\"https://flutter.dev/images/cd/android.png\" alt=\"Android\"> Check that <code class=\"language-text\">package_name</code> in <code class=\"language-text\">[project]/android/Appfile</code> matches your package name in AndroidManifest.xml.</p>\n</li>\n<li>\n<p><img src=\"https://flutter.dev/images/cd/ios.png\" alt=\"iOS\"> Check that <code class=\"language-text\">app_identifier</code> in <code class=\"language-text\">[project]/ios/Appfile</code> also matches Info.plist’s bundle identifier. Fill in<code class=\"language-text\">apple_id</code>, <code class=\"language-text\">itc_team_id</code>, <code class=\"language-text\">team_id</code> with your respective account info.</p>\n</li>\n<li>\n<p>Set up your local login credentials for the stores.</p>\n<ul>\n<li><img src=\"https://flutter.dev/images/cd/android.png\" alt=\"Android\"> Follow the <a href=\"https://docs.fastlane.tools/getting-started/android/setup/#setting-up-supply\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Supply setup steps</a> and ensure that <code class=\"language-text\">fastlane supply init</code> successfully syncs data from your Play Store console. <em>Treat the .json file like your password and do not check it into any public source control repositories.</em></li>\n<li><img src=\"https://flutter.dev/images/cd/ios.png\" alt=\"iOS\"> Your iTunes Connect username is already in your <code class=\"language-text\">Appfile</code>’s <code class=\"language-text\">apple_id</code> field. Set the <code class=\"language-text\">FASTLANE_PASSWORD</code> shell environment variable with your iTunes Connect password. Otherwise, you’ll be prompted when uploading to iTunes/TestFlight.</li>\n</ul>\n</li>\n<li>\n<p>Set up code signing.</p>\n<ul>\n<li></li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> On Android, there are two signing keys: deployment and upload. The end-users download the .apk signed with the ‘deployment key’. An ‘upload key’ is used to authenticate the .apk uploaded by developers onto the Play Store and is re-signed with the deployment key once in the Play Store.\n\n - It’s highly recommended to use the automatic cloud managed signing for the deployment key. For more information, see the [official Play Store documentation](https://support.google.com/googleplay/android-developer/answer/7384423?hl=en).\n - Follow the [key generation steps](https://developer.android.com/studio/publish/app-signing#sign-apk) to create your upload key.\n - Configure gradle to use your upload key when building your app in release mode by editing `android.buildTypes.release` in `[project]/android/app/build.gradle`.</code></pre></div>\n<ul>\n<li></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> On iOS, create and sign using a distribution certificate instead of a development certificate when you’re ready to test and deploy using TestFlight or App Store.\n\n - Create and download a distribution certificate in your [Apple Developer Account console](https://developer.apple.com/account/ios/certificate/).\n - `open [project]/ios/Runner.xcworkspace/` and select the distribution certificate in your target’s settings pane.</code></pre></div>\n<ol start=\"7\">\n<li>\n<p>Create a</p>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Fastfile</code></pre></div>\n<p>   script for each platform.</p>\n<ul>\n<li><img src=\"https://flutter.dev/images/cd/android.png\" alt=\"Android\"> On Android, follow the <a href=\"https://docs.fastlane.tools/getting-started/android/beta-deployment/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fastlane Android beta deployment guide</a>. Your edit could be as simple as adding a <code class=\"language-text\">lane</code>that calls <code class=\"language-text\">upload_to_play_store</code>. Set the <code class=\"language-text\">apk</code> argument to <code class=\"language-text\">../build/app/outputs/apk/release/app-release.apk</code>to use the apk <code class=\"language-text\">flutter build</code> already built.</li>\n<li><img src=\"https://flutter.dev/images/cd/ios.png\" alt=\"iOS\"> On iOS, follow the <a href=\"https://docs.fastlane.tools/getting-started/ios/beta-deployment/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fastlane iOS beta deployment guide</a>. Your edit could be as simple as adding a <code class=\"language-text\">lane</code> that calls <code class=\"language-text\">build_ios_app</code> with <code class=\"language-text\">export_method: &#39;app-store&#39;</code> and <code class=\"language-text\">upload_to_testflight</code>. On iOS an extra build is required since <code class=\"language-text\">flutter build</code> builds an .app rather than archiving .ipas for release.</li>\n</ul>\n<p>You’re now ready to perform deployments locally or migrate the deployment process to a continuous integration (CI) system.</p>\n<h3 id=\"running-deployment-locally\"><a href=\"#running-deployment-locally\" aria-label=\"running deployment locally permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Running deployment locally</h3>\n<ol>\n<li>\n<p>Build the release mode app.</p>\n<ul>\n<li><img src=\"https://flutter.dev/images/cd/android.png\" alt=\"Android\"> <code class=\"language-text\">flutter build apk --release</code>.</li>\n<li><img src=\"https://flutter.dev/images/cd/ios.png\" alt=\"iOS\"> <code class=\"language-text\">flutter build ios --release --no-codesign</code>. No need to sign now since fastlane will sign when archiving.</li>\n</ul>\n</li>\n<li>\n<p>Run the Fastfile script on each platform.</p>\n<ul>\n<li><img src=\"https://flutter.dev/images/cd/android.png\" alt=\"Android\"> <code class=\"language-text\">cd android</code> then <code class=\"language-text\">fastlane [name of the lane you created]</code>.</li>\n<li><img src=\"https://flutter.dev/images/cd/ios.png\" alt=\"iOS\"> <code class=\"language-text\">cd ios</code> then <code class=\"language-text\">fastlane [name of the lane you created]</code>.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"cloud-build-and-deploy-setup\"><a href=\"#cloud-build-and-deploy-setup\" aria-label=\"cloud build and deploy setup permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cloud build and deploy setup</h3>\n<p>First, follow the local setup section described in ‘Local setup’ to make sure the process works before migrating onto a cloud system like Travis.</p>\n<p>The main thing to consider is that since cloud instances are ephemeral and untrusted, you won’t be leaving your credentials like your Play Store service account JSON or your iTunes distribution certificate on the server.</p>\n<p>Continuous Integration (CI) systems, such as <a href=\"https://cirrus-ci.org/guide/writing-tasks/#encrypted-variables\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cirrus</a> generally support encrypted environment variables to store private data.</p>\n<p><strong>Take precaution not to re-echo those variable values back onto the console in your test scripts</strong>. Those variables are also not available in pull requests until they’re merged to ensure that malicious actors cannot create a pull request that prints these secrets out. Be careful with interactions with these secrets in pull requests that you accept and merge.</p>\n<ol>\n<li>\n<p>Make login credentials ephemeral.</p>\n<ul>\n<li></li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> On Android:\n\n - Remove the `json_key_file` field from `Appfile` and store the string content of the JSON in your CI system’s encrypted variable. Use the `json_key_data` argument in `upload_to_play_store` to read the environment variable directly in your `Fastfile`.\n\n - Serialize your upload key (for example, using base64) and save it as an encrypted environment variable. You can deserialize it on your CI system during the install phase with\n\n   ```\n     echo &quot;$PLAY_STORE_UPLOAD_KEY&quot; | base64 --decode &gt; /home/cirrus/[directory # and filename specified in your gradle].keystore\n   ```</code></pre></div>\n<ul>\n<li></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> On iOS:\n\n - Move the local environment variable `FASTLANE_PASSWORD` to use encrypted environment variables on the CI system.\n - The CI system needs access to your distribution certificate. fastlane’s [Match](https://docs.fastlane.tools/actions/match/) system is recommended to synchronize your certificates across machines.</code></pre></div>\n<ol start=\"2\">\n<li>\n<p>It’s recommended to use a Gemfile instead of using an indeterministic</p>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">gem install fastlane</code></pre></div>\n<p>   on the CI system each time to ensure the fastlane dependencies are stable and reproducible between local and cloud machines. However, this step is optional.</p>\n<ul>\n<li>In both your</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> ```\n [project]/android\n ```\n\n  \n\n and\n\n  \n\n ```\n [project]/ios\n ```\n\n  \n\n folders, create a\n\n  \n\n ```\n Gemfile\n ```\n\n  \n\n containing the following content:\n\n ```\n source &quot;https://rubygems.org&quot;\n \n gem &quot;fastlane&quot;\n ```</code></pre></div>\n<ul>\n<li>\n<p>In both directories, run <code class=\"language-text\">bundle update</code> and check both <code class=\"language-text\">Gemfile</code> and <code class=\"language-text\">Gemfile.lock</code> into source control.</p>\n</li>\n<li>\n<p>When running locally, use <code class=\"language-text\">bundle exec fastlane</code> instead of <code class=\"language-text\">fastlane</code>.</p>\n</li>\n<li>\n<p>Create the CI test script such as</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.travis.yml</code></pre></div>\n<p>   or</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.cirrus.yml</code></pre></div>\n<p>   in your repository root.</p>\n<ul>\n<li>Shard your script to run on both Linux and macOS platforms.</li>\n<li>Remember to specify a dependency on Xcode for macOS (for example <code class=\"language-text\">osx_image: xcode9.2</code>).</li>\n<li>See <a href=\"https://docs.fastlane.tools/best-practices/continuous-integration\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fastlane CI documentation</a> for CI specific setup.</li>\n<li>\n<p>During the setup phase, depending on the platform, make sure that:</p>\n<ul>\n<li>Bundler is available using <code class=\"language-text\">gem install bundler</code>.</li>\n<li>For Android, make sure the Android SDK is available and the <code class=\"language-text\">ANDROID_HOME</code> path is set.</li>\n<li>Run <code class=\"language-text\">bundle install</code> in <code class=\"language-text\">[project]/android</code> or <code class=\"language-text\">[project]/ios</code>.</li>\n<li>Make sure the Flutter SDK is available and set in <code class=\"language-text\">PATH</code>.</li>\n</ul>\n</li>\n<li>\n<p>In the script phase of the CI task:</p>\n<ul>\n<li>Run <code class=\"language-text\">flutter build apk --release</code> or <code class=\"language-text\">flutter build ios --release --no-codesign</code> depending on the platform.</li>\n<li><code class=\"language-text\">cd android</code> or <code class=\"language-text\">cd ios</code>.</li>\n<li><code class=\"language-text\">bundle exec fastlane [name of the lane]</code>.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"reference\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h3>\n<p>The <a href=\"https://github.com/flutter/flutter/tree/master/examples/flutter_gallery\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Flutter Gallery in the Flutter repo</a> uses fastlane for continuous deployment. See the source for a working example of fastlane in action. Also see the Flutter framework repository’s <a href=\"https://github.com/flutter/flutter/blob/master/.cirrus.yml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cirrus script</a>.</p>\n<h2 id=\"\"><a href=\"#\" aria-label=\" permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>","fields":{"slug":"/fluxstore/delivery/"},"timeToRead":7,"excerpt":"Follow continuous delivery best practices with Flutter to make sure your application is delivered to your beta testers and validated on a…","fileAbsolutePath":"/Users/minhpham/Data/Projects/inspireui-documents/docs/content/fluxstore/delivery.md"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/fluxstore/delivery/"}}