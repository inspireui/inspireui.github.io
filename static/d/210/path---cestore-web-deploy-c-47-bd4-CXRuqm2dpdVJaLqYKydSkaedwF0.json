{"data":{"site":{"siteMetadata":{"siteUrl":"http://ghost.local:8000","title":"InspireUI Document","description":"InspireUI document"}},"markdownRemark":{"frontmatter":{"title":"Deploy","date":null,"date_pretty":null,"path":null,"meta_title":"CeStore Web - ReactJS web app & React Native mobile app for e-commerce","meta_description":"React Native currently creates vibrant wave in mobile application development. “Write once, Run anywhere”, then you can effectively produce mobile app across all platforms including iOS & Android by one language with “Native effect”.","image":null,"next":null,"sidebar":"cestore-web","toc":null,"keywords":["cestore","cestore template","react-native","react-native app"]},"html":"<h2>How to deploy a Cezerin on Ubuntu 16.04</h2>\n<ul>\n<li><a href=\"#1-create-droplet\">Create droplet</a></li>\n<li><a href=\"#2-install-docker\">Install Docker</a></li>\n<li><a href=\"#3-run-mongodb\">Run MongoDB</a></li>\n<li><a href=\"#4-run-cezerin\">Run Cezerin</a></li>\n<li><a href=\"#5-preparing-database\">Preparing Database</a></li>\n<li><a href=\"#6-setup-domain-with-cloudflare\">Setup domain with</a></li>\n<li><a href=\"#7-turn-off-developer-mode\">Turn off Developer Mode</a></li>\n</ul>\n<h3>1. Create droplet</h3>\n<p>I'll use <a href=\"https://www.digitalocean.com/\">DigitalOcean</a> to deploy Cezerin.</p>\n<ol>\n<li>Click <strong>Create droplet</strong></li>\n<li>Choose an image: <code>Ubuntu 16.04.4 x64</code></li>\n<li>Choose a size: <code>2 GB (RAM), 1 vCPU, 50 GB (SSD)</code></li>\n<li>Choose a datacenter region: <code>San Francisco</code></li>\n<li>Then SSH to droplet.</li>\n</ol>\n<h3>2. Install Docker</h3>\n<p><a href=\"https://docs.docker.com/install/linux/docker-ce/ubuntu/\">Docker guide.</a></p>\n<pre><code class=\"language-shell\">sudo apt-get update\n</code></pre>\n<pre><code class=\"language-shell\">sudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    software-properties-common\n</code></pre>\n<pre><code class=\"language-shell\">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n</code></pre>\n<pre><code class=\"language-shell\">sudo add-apt-repository \\\n   \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   $(lsb_release -cs) \\\n   stable\"\n</code></pre>\n<pre><code class=\"language-shell\">sudo apt-get update\n</code></pre>\n<pre><code class=\"language-shell\">sudo apt-get install docker-ce\n</code></pre>\n<h3>3. Run MongoDB</h3>\n<pre><code class=\"language-shell\">docker run --name store-db -v /var/www/store-db:/data/db -d mongo:latest\n</code></pre>\n<h3>4. Run Cezerin</h3>\n<pre><code class=\"language-shell\">docker run -d \\\n--name store \\\n--link store-db:db \\\n-p 80:80 \\\n-e DB_HOST=db \\\n-e DB_PORT=27017 \\\n-e DB_NAME=shop \\\n-v /var/www/store/content:/var/www/cezerin/public/content \\\ncezerin/cezerin:latest\n</code></pre>\n<p>Check logs</p>\n<pre><code class=\"language-shell\">docker logs store\n</code></pre>\n<h3>5. Preparing Database</h3>\n<p>Run <code>npm run setup</code> on Cezerin container to add default data and create indexes.</p>\n<pre><code class=\"language-shell\">sudo docker exec store bash -c \"npm run setup\"\n</code></pre>\n<h3>6. Setup domain with CloudFlare</h3>\n<p><a href=\"https://www.cloudflare.com\">Cloudflare.</a></p>\n<ul>\n<li>Get droplet IP on DigitalOcean\n<img src=\"./assets/do-ip.png\" alt=\"DigitalOcean IP Address\"></li>\n<li>Add <code>A</code> and <code>CNAME</code> to DNS on CloudFlare\n<img src=\"./assets/dns.png\" alt=\"CloudFlare DNS\"></li>\n<li>Set SSL to <code>Flexible</code> on CloudFlare\n<img src=\"./assets/cf-ssl.png\" alt=\"CloudFlare SSL\"></li>\n<li>Turn on <code>Always use HTTPS</code> on CloudFlare\n<img src=\"./assets/cf-alway-https.png\" alt=\"CloudFlare Always HTTPS\"></li>\n</ul>\n<h3>7. Turn off Developer Mode</h3>\n<p>By default, Cezerin is in developer mode. This means you can access API and Dashboard without access tokens.<br>\nTo turn off developer mode, you need to do:</p>\n<ul>\n<li>\n<p>Add access token in Dashboard or MongoDB</p>\n</li>\n<li>\n<p>Set SMTP server from Dashboard or in <code>config/server.js</code></p>\n</li>\n<li>\n<p>Remove <code>developerMode</code> from <code>config/server.js</code></p>\n</li>\n<li>\n<p>Remove <code>developerMode</code> from <code>config/admin.js</code></p>\n</li>\n<li>\n<p><code>npm run build</code> inside Cezerin container</p>\n</li>\n<li>\n<p><code>pm2 reload api</code> inside Cezerin container</p>\n<blockquote>\n<p>In order to login as the admin site, you should add new record from /admin/settings/tokens</p>\n<p>example: <a href=\"http://cestore.inspireui.com/admin/settings/tokens\">http://cestore.inspireui.com/admin/settings/tokens</a> </p>\n</blockquote>\n</li>\n</ul>\n<h3>8. Example nginx config on production</h3>\n<pre><code>server {\n        # Dynamic image resizing server\n        listen 127.0.0.1:8888;\n        server_tokens off;\n        location ~ \"^/resize/(?&#x3C;entity>\\w+)/(?&#x3C;id>\\w+)/(?&#x3C;width>[1-9][0-9][0-9]{1}|[1][0-9][0-9][0-9]{1})/(?&#x3C;file>.+)$\" {\n                alias /var/www/beostore/cezerin/public/content/images/$entity/$id/$file;\n                image_filter_buffer 20M;\n                image_filter_jpeg_quality 85;\n                image_filter_interlace on;\n                image_filter resize $width -;\n        }\n}\n\n# Cache rule for resized images\nproxy_cache_path /tmp/nginx-images-cache2/ levels=1:2 keys_zone=images:10m inactive=30d max_size=5g use_temp_path=off;\n\nserver {\n        listen 80;\n        server_name cestore.inspireui.com;\n\n        #ssl_certificate     /etc/nginx/ssh/gd.crt;\n        #ssl_certificate_key /etc/nginx/privkey.pem;\n\n        gzip              on;\n        gzip_comp_level   2;\n        gzip_min_length   1024;\n        gzip_vary         on;\n        gzip_proxied      expired no-cache no-store private auth;\n        gzip_types        application/x-javascript application/javascript application/xml application/json text/xml text/css text$\n\n        client_body_timeout 12;\n        client_header_timeout 12;\n        reset_timedout_connection on;\n        send_timeout 10;\n        server_tokens off;\n        client_max_body_size 50m;\n\n        expires 1y;\n        access_log off;\n        log_not_found off;\n        root /var/www/beostore/cezerin/public/content;\n\n        location ~ \"^/images/(?&#x3C;entity>\\w+)/(?&#x3C;id>\\w+)/(?&#x3C;width>[1-9][0-9][0-9]{1}|[1][0-9][0-9][0-9]{1})/(?&#x3C;file>.+)$\" {\n                # /images/products/id/100/file.jpg >>> Proxy to internal image resizing server\n                proxy_pass http://127.0.0.1:8888/resize/$entity/$id/$width/$file;\n                proxy_cache images;\n                proxy_cache_valid 200 30d;\n        }\n\n        location /admin {\n                alias /var/www/beostore/cezerin/public/admin/;\n                            try_files /index.html /index.html;\n        }\n\n        location /admin-assets/ {\n                alias /var/www/beostore/cezerin/public/admin-assets/;\n        }\n\n        location /assets/ {\n                alias /var/www/beostore/cezerin/theme/assets/;\n        }\n        location /sw.js {\n                root /var/www/beostore/cezerin/public/;\n        }\n\n        location /sw-toolbox.js {\n                root /var/www/beostore/cezerin/public/;\n        }\n\n        location ~ ^/(api|ajax|ws)/ {\n                # Proxy to NodeJS\n                expires off;\n                proxy_pass       http://127.0.0.1:3001;\n                proxy_set_header Host $host;\n                proxy_set_header X-Real-IP $remote_addr;\n                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n                proxy_set_header X-Forwarded-Proto $scheme;\n                proxy_set_header Upgrade $http_upgrade;\n                proxy_set_header Connection \"upgrade\";\n        }\n\n        location / {\n                try_files $uri @proxy;\n        }\n\n        location @proxy {\n                # Proxy to NodeJS\n                expires off;\n                proxy_pass       http://127.0.0.1:3000;\n                proxy_set_header Host $host;\n                proxy_set_header X-Real-IP $remote_addr;\n                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n                proxy_set_header X-Forwarded-Proto $scheme;\n        }\n}\n</code></pre>","fields":{"slug":"/cestore-web/deploy/"},"timeToRead":4,"excerpt":"How to deploy a Cezerin on Ubuntu 16.04 Create droplet Install Docker Run MongoDB Run Cezerin Preparing Database Setup domain with Turn off…","fileAbsolutePath":"/Users/minhpham/Data/Projects/inspireui-documents/docs/content/cestore-web/deploy.md"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/cestore-web/deploy/"}}