{"version":3,"sources":["webpack:///./src/components/faq/FAQLink.js","webpack:///./src/pages/faq.js","webpack:///./src/components/common/meta/getAuthorProperties.js","webpack:///./src/components/common/meta/ImageMeta.js","webpack:///./src/components/common/meta/ArticleMetaGhost.js","webpack:///./src/components/common/meta/ArticleMetaMD.js","webpack:///./src/components/common/meta/WebsiteMeta.js","webpack:///./src/components/common/meta/MetaData.js","webpack:///./src/components/common/meta/getMetaImageUrls.js","webpack:///./src/components/common/meta/index.js"],"names":["FAQLink","_ref","post","section","title","children","to","className","slug","excerpt","length","substring","react_default","a","createElement","Spirit","small","defaultProps","propTypes","PropTypes","shape","string","isRequired","node","__webpack_require__","d","__webpack_exports__","pageQuery","FAQPage","data","location","imageUrl","getMetaImageUrls","Fragment","meta","type","description","image","layout","headerDividerStyle","page","xl","h4","faq_FAQLink","site","siteMetadata","siteUrl","pathname","getAuthorProperties","primaryAuthor","fetchAuthorData","authorProfiles","push","website","twitter","_","trimStart","facebook","compact","name","sameAsArray","join","profile_image","bool","ImageMeta","Helmet_default","content","property","ArticleMetaGhost","canonical","overwriteDefaultImage","ghostPost","author","primary_author","publicTags","map","tagsHelper","visibility","fn","tag","primaryTag","seoImage","feature_image","meta_title","meta_description","rel","href","og_title","og_description","published_at","updated_at","keyword","i","key","twitter_title","twitter_description","meta_ImageMeta","object","tags","arrayOf","ArticleMetaMD","markdownRemark","fm","frontmatter","publishedAtISODate","date","Date","toISOString","keywords","timeToRead","number","WebsiteMeta","oneOf","MetaData","_ref2","url","resolve","meta_ArticleMetaGhost","meta_ArticleMetaMD","meta_WebsiteMeta","SITEURL","process","imageUrls","faq","integrations","tutorials","default","proptypes","meta_MetaData","meta_getMetaImageUrls"],"mappings":"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","file":"component---src-pages-faq-js-a04730b332907f8f4276.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\n\nimport { Spirit } from '../../styles/spirit-styles'\n\nconst FAQLink = ({ post, section, title, children, to, className }) => {\n    const url = post ? `/${section}/${post.slug}/` : to\n    title = post ? post.title : title\n    const excerpt = post ?\n        post.excerpt.length > 200 ? `${post.excerpt.substring(0, 200)}...` : post.excerpt\n        : children\n\n    return (\n        <span className={className}>\n            <h4  className={`${Spirit.excerpt} link darkgrey fw5`}>{title}</h4>\n            {excerpt && <p className={`${Spirit.small} ma0 f8 lh-copy middarkgrey mb6`}>{excerpt}</p>}\n        </span>\n    )\n}\nFAQLink.defaultProps = {\n    className: `f5 db tdn mb6 faq-question bb b--whitegrey`,\n    section: `faq`,\n}\n\nFAQLink.propTypes = {\n    post: PropTypes.shape({\n        title: PropTypes.string,\n        slug: PropTypes.string,\n        excerpt: PropTypes.string,\n    }),\n    section: PropTypes.string.isRequired,\n    title: PropTypes.string,\n    children: PropTypes.node,\n    to: PropTypes.string,\n    className: PropTypes.string,\n}\n\nexport default FAQLink\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\n\nimport { Spirit } from '../styles/spirit-styles'\nimport { FAQLink } from '../components/faq'\nimport { Layout } from '../components/common/layout'\nimport { MetaData, getMetaImageUrls } from '../components/common/meta'\n\nconst FAQPage = ({ data, location }) => {\n    // Add meta title and description for this page here to overwrite the site meta data as set in the config\n    const title = `FAQ - Ghost`\n    const description = `Answers to our most popular questions: billing, hosting, troubleshooting and more.`\n    const imageUrl = getMetaImageUrls(`faq`)\n\n    return (\n        <>\n            <MetaData\n                data={data}\n                location={location}\n                type=\"website\"\n                title={title}\n                description={description}\n                image={imageUrl}\n            />\n            <Layout headerDividerStyle=\"shadow\">\n                <div className=\"bg-faq bb b--whitegrey\">\n                    <div className={`${Spirit.page.xl} pt-vw7 pt-vw1-ns pb-vw1`}>\n                        <h1 className={`${Spirit.h4} white`}>Frequently Asked Questions</h1>\n                    </div>\n                </div>\n                <div className={`${Spirit.page.xl} grid-12`}>\n                    <div className=\"bg-white shadow-2 br4 mt5 mt10-ns pa5 pa15-ns pt10-ns pb12-ns col-12 col-8-ns\">\n                        <FAQLink title=\"Does it include full source code package?\">\n                        Yes, you will get the full source code package and also the free Wordpress plugins (if the product require to connect via Rest API)\n                        </FAQLink>\n\n                        <FAQLink title=\" Can I release the app to both iOS and Android?\">\n                        Yes, as this is made by React Native framework which support to release for both iOS and Android\n                        </FAQLink>\n\n                        <FAQLink title=\"Will i get the free upgrade on next comming version\">\n                        Yes, you will get the free upgrade with more awesome features coming, please follow the change logs to see the detail update. You will get the notify email for new version update on stores.\n\n                        </FAQLink>\n\n                        <FAQLink title=\"What is difference between the MStore Pro and Expo version\">\n                        Basically the main difference is the Tools that we use to build the product, the features will be the same for both version, but the Pro version is more flexiblity to add more native library through XCode (iOS) and Android Studio. The Expo version is not include the ios & android folder but you can easier to upgrade the React Native and take advancetage from Expo SDK. \n                        For more information please refer to https://facebook.github.io/react-native/docs/getting-started.html\n                        </FAQLink>\n\n                        <FAQLink  title=\"What is difference between the ListApp and ListPro\">\n                        Both apps are support for Listing Directory business and most of the features are the same, ListPro is only support the ListingPro template, and ListApp are support for following templates: Listable, MyListing and Listify (these wordpress template is sold separately and from other Authors)\n                        </FAQLink>\n                    </div>\n                  \n                </div>\n            </Layout>\n        </>\n    )\n}\n\nFAQPage.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n}\n\nexport default FAQPage\n\nexport const pageQuery = graphql`\n  query GhostFAQQuery {\n    site {\n        ...SiteMetaFields\n    }\n  }\n`\n","import _ from 'lodash'\nimport PropTypes from 'prop-types'\n\nexport const getAuthorProperties = (primaryAuthor, fetchAuthorData) => {\n    let authorProfiles = []\n\n    if (fetchAuthorData) {\n        authorProfiles.push(\n            primaryAuthor.website ? primaryAuthor.website : null,\n            primaryAuthor.twitter ? `https://twitter.com/${_.trimStart(primaryAuthor.twitter, `@`)}/` : null,\n            primaryAuthor.facebook ? `https://www.facebook.com/${primaryAuthor.facebook}/` : null\n        )\n    } else {\n        authorProfiles.push(\n            `https://ghost.org/`,\n            `https://twitter.com/ghost/`,\n            `https://www.facebook.com/ghost/`\n        )\n    }\n\n    authorProfiles = _.compact(authorProfiles)\n\n    return {\n        name: fetchAuthorData ? primaryAuthor.name : `Ghost`,\n        sameAsArray: authorProfiles.length ? `[\"${_.join(authorProfiles, `\", \"`)}\"]` : null,\n        image: fetchAuthorData ? primaryAuthor.profile_image : null,\n    }\n}\n\ngetAuthorProperties.defaultProps = {\n    fetchAuthorData: false,\n}\n\ngetAuthorProperties.PropTypes = {\n    primaryAuthor: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        profile_image: PropTypes.string,\n        website: PropTypes.string,\n        twitter: PropTypes.string,\n        facebook: PropTypes.string,\n    }).isRequired,\n    fetchAuthorData: PropTypes.bool.isRequired,\n}\n\nexport default getAuthorProperties\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\n\nconst ImageMeta = ({ image }) => (\n    <Helmet>\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:image\" content={image} />\n        <meta property=\"og:image\" content={image} />\n        {/* These are the image sizes of the SEO feature images */}\n        <meta property=\"og:image:width\" content=\"1000\" />\n        <meta property=\"og:image:height\" content=\"523\" />\n    </Helmet >\n)\n\nImageMeta.propTypes = {\n    image: PropTypes.string.isRequired,\n}\n\nexport default ImageMeta\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\nimport { tags as tagsHelper } from '@tryghost/helpers'\n\nimport getAuthorProperties from './getAuthorProperties'\nimport ImageMeta from './ImageMeta'\n\nconst ArticleMetaGhost = ({ data, canonical, fetchAuthorData, title, overwriteDefaultImage, image }) => {\n    const { ghostPost } = data\n    const { siteMetadata } = data.site\n\n    const author = getAuthorProperties(ghostPost.primary_author, fetchAuthorData)\n    const publicTags = _.map(tagsHelper(ghostPost, { visibility: `public`, fn: tag => tag }), `name`)\n    const primaryTag = publicTags[0] || { name: `General`, slug: `general` }\n    const seoImage = (overwriteDefaultImage && ghostPost.feature_image) ? ghostPost.feature_image : image\n\n    return (\n        <>\n            <Helmet>\n                <title>{ghostPost.meta_title || title || ghostPost.title}</title>\n                <meta name=\"description\" content={ghostPost.meta_description || ghostPost.excerpt} />\n                <link rel=\"canonical\" href={canonical} />\n\n                <meta property=\"og:site_name\" content={siteMetadata.title} />\n                <meta name=\"og:type\" content=\"article\" />\n                <meta name=\"og:title\"\n                    content={\n                        ghostPost.og_title ||\n                        title ||\n                        ghostPost.meta_title ||\n                        ghostPost.title\n                    }\n                />\n                <meta name=\"og:description\"\n                    content={\n                        ghostPost.og_description ||\n                        ghostPost.excerpt ||\n                        ghostPost.meta_description\n                    }\n                />\n                <meta property=\"og:url\" content={canonical} />\n                <meta property=\"article:published_time\" content={ghostPost.published_at} />\n                <meta property=\"article:modified_time\" content={ghostPost.updated_at} />\n                {publicTags.map((keyword, i) => (<meta property=\"article:tag\" content={keyword} key={i} />))}\n                <meta property=\"article:author\" content=\"https://www.facebook.com/ghost/\" />\n\n                <meta name=\"twitter:title\"\n                    content={\n                        ghostPost.twitter_title ||\n                        title ||\n                        ghostPost.meta_title ||\n                        ghostPost.title\n                    }\n                />\n                <meta name=\"twitter:description\"\n                    content={\n                        ghostPost.twitter_description ||\n                        ghostPost.excerpt ||\n                        ghostPost.meta_description\n                    }\n                />\n                <meta name=\"twitter:url\" content={canonical} />\n                {/* <meta name=\"twitter.label1\" content=\"Reading time\" /> */}\n                {/* <meta name=\"twitter:data1\" content=\"TODO: Reading time helper and replace existing `label1` data\" /> */}\n                <meta name=\"twitter:label1\" content=\"Written by\" />\n                <meta name=\"twitter:data1\" content={author.name} />\n                <meta name=\"twitter:label2\" content=\"Filed under\" />\n                <meta name=\"twitter:data2\" content={primaryTag} />\n                <meta name=\"twitter:site\" content=\"@tryghost\" />\n                <meta name=\"twitter:creator\" content=\"@tryghost\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"Article\",\n                        \"author\": {\n                            \"@type\": \"Person\",\n                            \"name\": \"${author.name}\",\n                            ${author.image ? author.sameAsArray ? `\"image\": \"${author.image}\",` : `\"image\": \"${author.image}\"` : ``}\n                            ${author.sameAsArray ? `\"sameAs\": ${author.sameAsArray}` : ``}\n                        },\n                        ${publicTags.length ? `\"keywords\": \"${_.join(publicTags, `, `)}\",` : ``}\n                        \"headline\": \"${ghostPost.meta_title || title || ghostPost.title}\",\n                        \"url\": \"${canonical}\",\n                        \"datePublished\": \"${ghostPost.published_at}\",\n                        \"dateModified\": \"${ghostPost.updated_at}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${seoImage}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"description\": \"${ghostPost.meta_description || ghostPost.excerpt}\",\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${siteMetadata.siteUrl}\"\n                        }\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={seoImage} />\n        </>\n    )\n}\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//         \"name\": \"Ghost\",\n//             \"logo\": {\n//         \"@type\": \"ImageObject\",\n//             \"url\": \"https://blog.ghost.org/favicon.png\",\n//                 \"width\": 60,\n//                     \"height\": 60\n//     }\n// },\n\nArticleMetaGhost.defaultProps = {\n    fetchAuthorData: false,\n}\n\nArticleMetaGhost.propTypes = {\n    data: PropTypes.shape({\n        ghostPost: PropTypes.shape({\n            title: PropTypes.string.isRequired,\n            published_at: PropTypes.string.isRequired,\n            updated_at: PropTypes.string.isRequired,\n            excerpt: PropTypes.string.isRequired,\n            meta_title: PropTypes.string,\n            meta_description: PropTypes.string,\n            primary_author: PropTypes.object.isRequired,\n            feature_image: PropTypes.string,\n            tags: PropTypes.arrayOf(\n                PropTypes.shape({\n                    name: PropTypes.string,\n                    slug: PropTypes.string,\n                    visibility: PropTypes.string,\n                })\n            ),\n            primaryTag: PropTypes.shape({\n                name: PropTypes.string,\n            }),\n            og_title: PropTypes.string,\n            og_description: PropTypes.string,\n            twitter_title: PropTypes.string,\n            twitter_description: PropTypes.string,\n        }).isRequired,\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    fetchAuthorData: PropTypes.bool,\n    title: PropTypes.string,\n    overwriteDefaultImage: PropTypes.bool,\n}\n\nexport default ArticleMetaGhost\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\n\nimport ImageMeta from './ImageMeta'\nimport { getMetaImageUrls } from '.'\n\nconst ArticleMetaMD = ({ data, canonical }) => {\n    const post = data.markdownRemark\n    const fm = post.frontmatter\n    const { siteMetadata } = data.site\n\n    // Convert the frontmatter date into ISO String but, and use a fixed\n    // date, if no date is set. The published date should not change once set.\n    const publishedAtISODate = fm.date ? new Date(fm.date).toISOString() : new Date(`2018-10-15`).toISOString()\n    const primaryTag = fm.keywords && fm.keywords.length ? fm.keywords[0] : null\n    const seoImage = getMetaImageUrls()\n\n    return (\n        <>\n            <Helmet>\n                <title>{fm.meta_title || fm.title}</title>\n                <meta name=\"description\" content={fm.meta_description || post.excerpt} />\n                <link rel=\"canonical\" href={canonical} />\n\n                <meta property=\"og:site_name\" content={siteMetadata.title} />\n                <meta name=\"og:type\" content=\"article\" />\n                <meta name=\"og:title\" content={fm.meta_title || fm.title} />\n                <meta name=\"og:description\" content={fm.meta_description || post.excerpt} />\n                <meta property=\"og:url\" content={canonical} />\n                <meta property=\"article:published_time\" content={publishedAtISODate} />\n                {fm.keywords && fm.keywords.length ? fm.keywords.map((keyword, i) => (<meta property=\"article:tag\" content={keyword} key={i} />)) : null}\n                <meta property=\"article:author\" content=\"https://www.facebook.com/ghost/\" />\n\n                <meta name=\"twitter:title\" content={fm.meta_title || fm.title} />\n                <meta name=\"twitter:description\" content={fm.meta_description || post.excerpt} />\n                <meta name=\"twitter:url\" content={canonical} />\n                <meta name=\"twitter.label1\" content=\"Reading time\" />\n                <meta name=\"twitter:data1\" content={`${post.timeToRead} min read`} />\n                {primaryTag ? <meta name=\"twitter:label2\" content=\"Filed under\" /> : null}\n                {primaryTag ? <meta name=\"twitter:data2\" content={primaryTag} /> : null}\n                <meta name=\"twitter:site\" content=\"@tryghost\" />\n                <meta name=\"twitter:creator\" content=\"@tryghost\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"Article\",\n                        \"author\": {\n                            \"@type\": \"Person\",\n                            \"name\": \"Ghost\",\n                            \"sameAs\": [\n                                \"https://ghost.org/\",\n                                \"https://www.facebook.com/ghost/\",\n                                \"https://twitter.com/tryghost/\"\n                            ]\n                        },\n                        ${fm.keywords && fm.keywords.length ? `\"keywords\": \"${_.join(fm.keywords, `, `)}\",` : ``}\n                        \"headline\": \"${fm.meta_title || fm.title}\",\n                        \"url\": \"${canonical}\",\n                        \"datePublished\": \"${publishedAtISODate}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${seoImage}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"description\": \"${fm.meta_description || post.excerpt}\",\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${siteMetadata.siteUrl}\"\n                        }\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={seoImage} />\n        </>\n    )\n}\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//     \"name\": \"Ghost\",\n//     \"logo\": {\n//         \"@type\": \"ImageObject\",\n//         \"url\": \"https://blog.ghost.org/favicon.png\",\n//         \"width\": 60,\n//         \"height\": 60\n//     }\n// },\n\nArticleMetaMD.propTypes = {\n    data: PropTypes.shape({\n        markdownRemark: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n                title: PropTypes.string.isRequired,\n                keywords: PropTypes.arrayOf(\n                    PropTypes.string,\n                ),\n                meta_title: PropTypes.string,\n                meta_description: PropTypes.string,\n                date: PropTypes.string,\n            }).isRequired,\n            excerpt: PropTypes.string.isRequired,\n            timeToRead: PropTypes.number,\n        }).isRequired,\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n}\n\nexport default ArticleMetaMD\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\n\nimport ImageMeta from './ImageMeta'\n\nconst WebsiteMeta = ({ data, canonical, title, description, image, type }) => (\n        <>\n            <Helmet>\n                <title>{title}</title>\n                <meta name=\"description\" content={description} />\n                <link rel=\"canonical\" href={canonical} />\n                <meta property=\"og:site_name\" content={data.site.siteMetadata.title} />\n                <meta property=\"og:type\" content=\"website\" />\n                <meta property=\"og:title\" content={title} />\n                <meta property=\"og:description\" content={description} />\n                <meta property=\"og:url\" content={canonical} />\n                <meta name=\"twitter:title\" content={title} />\n                <meta name=\"twitter:description\" content={description} />\n                <meta name=\"twitter:url\" content={canonical} />\n                <meta name=\"twitter:site\" content=\"@tryghost\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": ${type && type === `series` ? `\"Series\"` : `\"WebSite\"`},\n                        \"url\": \"${canonical}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${image}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${data.site.siteMetadata.siteUrl}\"\n                        },\n                        \"description\": \"${description}\"\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={image} />\n        </>\n)\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//         \"name\": \"Ghost\",\n//             \"logo\": {\n//         \"@type\": \"ImageObject\",\n//             \"url\": \"https://blog.ghost.org/favicon.png\",\n//                 \"width\": 60,\n//                     \"height\": 60\n//     }\n// },\n\nWebsiteMeta.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    type: PropTypes.oneOf([`website`, `series`]).isRequired,\n}\n\nexport default WebsiteMeta\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport url from 'url'\n\nimport ArticleMetaGhost from './ArticleMetaGhost'\nimport ArticleMetaMD from './ArticleMetaMD'\nimport WebsiteMeta from './WebsiteMeta'\n\nconst MetaData = ({\n    data,\n    type,\n    title,\n    description,\n    image,\n    fetchAuthorData,\n    overwriteDefaultImage,\n    location,\n}) => {\n    const { ghostPost, markdownRemark } = data || {}\n    const { siteMetadata } = data.site\n\n    const canonical = url.resolve(siteMetadata.siteUrl, location.pathname, `/`)\n\n    if (type === `article`) {\n        if (ghostPost) {\n            return (\n                <ArticleMetaGhost\n                    data={data}\n                    canonical={canonical}\n                    fetchAuthorData={fetchAuthorData}\n                    title={title}\n                    image={image}\n                    overwriteDefaultImage={overwriteDefaultImage}\n                />\n            )\n        } else if (markdownRemark) {\n            return (\n                <ArticleMetaMD\n                    data={data}\n                    canonical={canonical}\n                />\n            )\n        }\n    } else if (type === `website` || type === `series`) {\n        return (\n            <WebsiteMeta\n                data={data}\n                canonical={canonical}\n                title={title}\n                description={description}\n                image={image}\n                type={type}\n            />\n        )\n    }\n\n    return null\n}\n\nMetaData.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n        ghostPost: PropTypes.object,\n        markdownRemark: PropTypes.object,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n    type: PropTypes.oneOf([`website`, `series`, `article`]).isRequired,\n    title: PropTypes.string,\n    description: PropTypes.string,\n    image: PropTypes.string,\n    fetchAuthorData: PropTypes.bool,\n    overwriteDefaultImage: PropTypes.bool,\n}\n\nexport default MetaData\n","import PropTypes from 'prop-types'\nimport url from 'url'\n\n// TODO: this should be available as global var without the need to query\n// the siteMetadata.\nconst SITEURL = process.env.SITE_URL || `https://docs.inspireui.com`\n\nconst imageUrls = {\n    faq: url.resolve(SITEURL, `/images/meta/Ghost-FAQ.jpg`),\n    integrations: url.resolve(SITEURL, `/images/meta/Ghost-Integrations.jpg`),\n    tutorials: url.resolve(SITEURL, `/images/meta/Ghost-Tutorials.jpg`),\n    default: url.resolve(SITEURL, `/images/meta/Ghost-Docs.jpg`),\n}\n\nexport const getMetaImageUrls = (section) => {\n    // Set the default image if no section is passed\n    section = section || `default`\n\n    return imageUrls[section]\n}\n\ngetMetaImageUrls.proptypes = {\n    section: PropTypes.string.isRequired,\n}\n\nexport default getMetaImageUrls\n\n","export { default as MetaData } from './MetaData'\nexport { default as getMetaImageUrls } from './getMetaImageUrls'\n"],"sourceRoot":""}