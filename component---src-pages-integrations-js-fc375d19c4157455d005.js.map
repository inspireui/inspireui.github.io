{"version":3,"sources":["webpack:///./src/components/integrations/IntegrationBox.js","webpack:///./node_modules/react-instantsearch-core/dist/es/connectors/connectHits.js","webpack:///./src/components/integrations/integration-search/IntegrationResults.js","webpack:///./node_modules/react-instantsearch-core/dist/es/connectors/connectSearchBox.js","webpack:///./src/components/integrations/integration-search/IntegrationSearchBox.js","webpack:///./src/components/integrations/integration-search/IntegrationIndex.js","webpack:///./src/components/integrations/IntegrationsContent.js","webpack:///./src/pages/integrations.js","webpack:///./src/components/common/meta/getAuthorProperties.js","webpack:///./src/components/common/meta/ImageMeta.js","webpack:///./src/components/common/meta/ArticleMetaGhost.js","webpack:///./src/components/common/meta/ArticleMetaMD.js","webpack:///./src/components/common/meta/WebsiteMeta.js","webpack:///./src/components/common/meta/MetaData.js","webpack:///./src/components/common/meta/getMetaImageUrls.js","webpack:///./src/components/common/meta/index.js"],"names":["IntegrationBox","_ref","post","hit","section","url","slug","title","optimisedImg","feature_image","image","react_default","a","createElement","common","to","className","elevation","radius","style","objectFit","src","alt","propTypes","PropTypes","shape","string","isRequired","connectHits","Object","createConnector","displayName","getProvidedProps","props","searchState","searchResults","results","indexUtils","this","context","hits","getSearchParameters","searchParameters","IntegrationResults","map","integrations_IntegrationBox","key","objectID","arrayOf","IntegrationResultsList","getCurrentRefinement","currentRefinement","_refine","nextRefinement","nextValue","defineProperty","connectSearchBox","defaultRefinement","prop_types_default","isSearchStalled","refine","cleanUp","_cleanUp","setQuery","getMetadata","_this","id","index","items","label","concat","value","nextState","IntegrationSearch","_React$Component","call","state","currentInput","showResetButton","handleChange","bind","assertThisInitialized_default","setInput","resetSearch","toggleResetButton","e","setState","val","searchActive","target","render","htmlFor","name","type","placeholder","autoComplete","onChange","onClick","React","Component","func","IntegrationSearchBox","IntegrationIndex","children","Index","indexName","node","IntegrationsContent","posts","activeSorting","searchSwitch","sortBy","field","firstSortField","secondSortField","sortedPosts","_","Fragment","layout","headerDividerStyle","header","theme","Spirit","sectionHeading","sectionSubHeading","integration_search_IntegrationSearchBox","integration_search_IntegrationIndex","page","xl","data-cy","href","IntegrationsTagList_default","location","integration_search_IntegrationResults","array","pathname","__webpack_require__","d","__webpack_exports__","pageQuery","IntegrationsPage","data","site","siteMetadata","siteUrl","description","allGhostPost","object","getAuthorProperties","primaryAuthor","fetchAuthorData","authorProfiles","push","website","twitter","trimStart","facebook","compact","sameAsArray","length","join","profile_image","defaultProps","bool","ImageMeta","Helmet_default","content","property","ArticleMetaGhost","canonical","overwriteDefaultImage","ghostPost","author","primary_author","publicTags","tagsHelper","visibility","fn","tag","primaryTag","seoImage","meta_title","meta_description","excerpt","rel","og_title","og_description","published_at","updated_at","keyword","i","twitter_title","twitter_description","meta_ImageMeta","tags","ArticleMetaMD","markdownRemark","fm","frontmatter","publishedAtISODate","date","Date","toISOString","keywords","getMetaImageUrls","timeToRead","number","WebsiteMeta","oneOf","MetaData","_ref2","resolve","meta_ArticleMetaGhost","meta_ArticleMetaMD","meta_WebsiteMeta","SITEURL","process","imageUrls","faq","integrations","tutorials","default","proptypes","meta_MetaData","meta_getMetaImageUrls"],"mappings":"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","file":"component---src-pages-integrations-js-fc375d19c4157455d005.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Box } from '../common'\n\nconst IntegrationBox = ({ post, hit, section }) => {\n    const url = post ? `/${section}/${post.slug}/` : hit.url\n    const title = post ? post.title : hit.title\n    const image = post ? post.feature_image : hit.image\n    const optimisedImg = `https://res.cloudinary.com/tryghost/image/fetch/w_120,h_100,c_fit/${image}`\n\n    return (\n        <Box\n            to={url}\n            className=\"flex flex-column justify-center items-center w-100 h30 pa3 tc tdn darkgrey bg-white shadow-2\"\n            elevation=\"2\"\n            radius=\"4\"\n        >\n            <div className=\"flex justify-center items-center h10 w13 mt1\">\n                <img className=\"w-100 h-100\" style={{ objectFit: `contain` }} src={optimisedImg} alt={title} />\n            </div>\n            <div className=\"f8 mt3\">{title}</div>\n        </Box>\n    )\n}\n\nIntegrationBox.propTypes = {\n    post: PropTypes.shape({\n        title: PropTypes.string,\n        feature_image: PropTypes.string,\n        slug: PropTypes.string,\n    }),\n    hit: PropTypes.shape({\n        url: PropTypes.string,\n        title: PropTypes.string,\n        image: PropTypes.string,\n    }),\n    section: PropTypes.string.isRequired,\n}\n\nexport default IntegrationBox\n","import createConnector from '../core/createConnector';\nimport { getResults } from '../core/indexUtils';\n/**\n * connectHits connector provides the logic to create connected\n * components that will render the results retrieved from\n * Algolia.\n *\n * To configure the number of hits retrieved, use [HitsPerPage widget](widgets/HitsPerPage.html),\n * [connectHitsPerPage connector](connectors/connectHitsPerPage.html) or pass the hitsPerPage\n * prop to a [Configure](guide/Search_parameters.html) widget.\n *\n * **Warning:** you will need to use the **objectID** property available on every hit as a key\n * when iterating over them. This will ensure you have the best possible UI experience\n * especially on slow networks.\n * @name connectHits\n * @kind connector\n * @providedPropType {array.<object>} hits - the records that matched the search state\n * @example\n * import React from 'react';\n * import { InstantSearch, Highlight, connectHits } from 'react-instantsearch-dom';\n *\n * const CustomHits = connectHits(({ hits }) => (\n *   <div>\n *     {hits.map(hit =>\n *       <p key={hit.objectID}>\n *         <Highlight attribute=\"name\" hit={hit} />\n *       </p>\n *     )}\n *   </div>\n * ));\n *\n * const App = () => (\n *   <InstantSearch\n *     appId=\"latency\"\n *     apiKey=\"6be0576ff61c053d5f9a3225e2a90f76\"\n *     indexName=\"instant_search\"\n *   >\n *     <CustomHits />\n *   </InstantSearch>\n * );\n */\n\nexport default createConnector({\n  displayName: 'AlgoliaHits',\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults) {\n    var results = getResults(searchResults, this.context);\n    var hits = results ? results.hits : [];\n    return {\n      hits: hits\n    };\n  },\n\n  /* Hits needs to be considered as a widget to trigger a search if no others widgets are used.\n   * To be considered as a widget you need either getSearchParameters, getMetadata or getTransitionState\n   * See createConnector.js\n   * */\n  getSearchParameters: function getSearchParameters(searchParameters) {\n    return searchParameters;\n  }\n});","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connectHits } from 'react-instantsearch-dom'\n\nimport { IntegrationBox } from '../.'\n\nconst IntegrationResults = ({ hits }) => (\n    <div className=\"gh-integrations w-100\">\n        {hits.map(hit => <IntegrationBox key={hit.objectID} hit={hit} section=\"integrations\" />)}\n    </div>\n)\n\nIntegrationResults.propTypes = {\n    hits: PropTypes.arrayOf(\n        PropTypes.shape({\n            objectID: PropTypes.string.isRequired,\n        }).isRequired,\n    ).isRequired,\n}\n\nconst IntegrationResultsList = connectHits(IntegrationResults)\n\nexport default IntegrationResultsList\n","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport { cleanUpValue, refineValue, getCurrentRefinementValue, getIndexId } from '../core/indexUtils';\n\nfunction getId() {\n  return 'query';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  var id = getId(props);\n  return getCurrentRefinementValue(props, searchState, context, id, '', function (currentRefinement) {\n    if (currentRefinement) {\n      return currentRefinement;\n    }\n\n    return '';\n  });\n}\n\nfunction _refine(props, searchState, nextRefinement, context) {\n  var id = getId();\n\n  var nextValue = _defineProperty({}, id, nextRefinement);\n\n  var resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage);\n}\n\nfunction _cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, getId());\n}\n/**\n * connectSearchBox connector provides the logic to build a widget that will\n * let the user search for a query\n * @name connectSearchBox\n * @kind connector\n * @propType {string} [defaultRefinement] - Provide a default value for the query\n * @providedPropType {function} refine - a function to change the current query\n * @providedPropType {string} currentRefinement - the current query used\n * @providedPropType {boolean} isSearchStalled - a flag that indicates if InstantSearch has detected that searches are stalled\n */\n\n\nexport default createConnector({\n  displayName: 'AlgoliaSearchBox',\n  propTypes: {\n    defaultRefinement: PropTypes.string\n  },\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults) {\n    return {\n      currentRefinement: getCurrentRefinement(props, searchState, this.context),\n      isSearchStalled: searchResults.isSearchStalled\n    };\n  },\n  refine: function refine(props, searchState, nextRefinement) {\n    return _refine(props, searchState, nextRefinement, this.context);\n  },\n  cleanUp: function cleanUp(props, searchState) {\n    return _cleanUp(props, searchState, this.context);\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setQuery(getCurrentRefinement(props, searchState, this.context));\n  },\n  getMetadata: function getMetadata(props, searchState) {\n    var _this = this;\n\n    var id = getId(props);\n    var currentRefinement = getCurrentRefinement(props, searchState, this.context);\n    return {\n      id: id,\n      index: getIndexId(this.context),\n      items: currentRefinement === null ? [] : [{\n        label: \"\".concat(id, \": \").concat(currentRefinement),\n        value: function value(nextState) {\n          return _refine(props, nextState, '', _this.context);\n        },\n        currentRefinement: currentRefinement\n      }]\n    };\n  }\n});","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connectSearchBox } from 'react-instantsearch-dom'\n\nimport { Icon } from '../../common'\n\nclass IntegrationSearch extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            currentInput: this.props.currentRefinement,\n            showResetButton: false,\n        }\n\n        this.handleChange = this.handleChange.bind(this)\n        this.setInput = this.setInput.bind(this)\n        this.resetSearch = this.resetSearch.bind(this)\n        this.toggleResetButton = this.toggleResetButton.bind(this)\n    }\n\n    setInput(e) {\n        this.setState(() => {\n            return { currentInput: e }\n        })\n    }\n\n    toggleResetButton(val) {\n        this.setState(() => {\n            return { showResetButton: val }\n        })\n    }\n\n    resetSearch() {\n        this.props.searchActive(false)\n        this.toggleResetButton(false)\n        this.props.refine()\n\n        this.setState(() => {\n            return { currentInput: `` }\n        })\n    }\n\n    handleChange(e) {\n        this.setInput(e.target.value)\n\n        if (!e.target.value) {\n            // input field is empty, stop what we're doing\n            return this.resetSearch()\n        }\n\n        // Tell parent component, that the search is active now\n        this.props.searchActive(true)\n        this.toggleResetButton(true)\n\n        return this.props.refine(e.target.value)\n    }\n\n    render() {\n        return (\n            <div className=\"relative mt8 mw-s center\">\n                <label htmlFor=\"integrationsearch\" className=\"clip\">Search</label>\n                <Icon name=\"search\" className=\"fill-lightgrey w5 h-auto absolute top-4 left-4\" />\n                <input\n                    id=\"integrationsearch\"\n                    name=\"integrationsearch\"\n                    className=\"input-reset form-text pa4 pl10 pr8 w-100 f6 br-pill ba b--transparent bg-white shadow-2 whitney middarkgrey dark-placeholder\"\n                    type=\"text\"\n                    placeholder=\"Search integrations...\"\n                    autoComplete=\"off\"\n                    value={this.state.currentInput}\n                    onChange={this.handleChange}\n                />\n                {this.state.showResetButton ?\n                    <button\n                        className=\"absolute top-0 right-0 bottom-0 pa0 pr2 b--transparent flex justify-center items-center bg-transparent\"\n                        onClick={this.resetSearch}\n                    >\n                        <Icon name=\"close\" className=\"w4 h4 pa2 fill-midgrey bg-white br-100 pointer dim\" />\n                    </button>\n                    : null\n                }\n            </div>\n        )\n    }\n}\n\nIntegrationSearch.propTypes = {\n    searchActive: PropTypes.func.isRequired,\n    currentRefinement: PropTypes.string,\n    refine: PropTypes.func,\n}\n\n// `IntegrationSearchBox` renders a `<IntegrationSearch>` widget that is connected to\n// the <InstantSearch> state, providing it with `currentRefinement` and `refine` props for\n// reading and manipulating the current query of the search.\nconst IntegrationSearchBox = connectSearchBox(IntegrationSearch)\n\nexport default IntegrationSearchBox\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Index } from 'react-instantsearch-dom'\n\nconst IntegrationIndex = ({ children }) => (<Index indexName=\"inspireui\">{children}</Index>)\n\nIntegrationIndex.propTypes = {\n    children: PropTypes.node.isRequired,\n}\n\nexport default IntegrationIndex\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\n\nimport { Layout } from '../common/layout'\nimport { NavBar } from '../common/'\nimport IntegrationBox from \"./IntegrationBox\"\nimport { Spirit } from '../../styles/spirit-styles'\nimport { IntegrationIndex, IntegrationSearchBox, IntegrationResults } from './integration-search'\nimport IntegrationsTagList from './IntegrationsTagList'\n\nclass IntegrationsContent extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            posts: this.props.posts,\n            activeSorting: `date`,\n            searchActive: false,\n        }\n\n        this.searchSwitch = this.searchSwitch.bind(this)\n    }\n\n    searchSwitch(val) {\n        // a passed argument needs to win over the toggle\n        this.setState((state) => {\n            return {\n                searchActive: val ? val : !state.searchActive,\n            }\n        })\n    }\n\n    sortBy(field) {\n        let firstSortField\n        let secondSortField\n\n        switch (field) {\n        case `date`:\n            firstSortField = `node.published_at`\n            secondSortField = `node.title`\n            this.setState(() => {\n                return { activeSorting: `date` }\n            })\n            break\n        case `title`:\n            firstSortField = `node.title`\n            secondSortField = `node.published_at`\n            this.setState(() => {\n                return { activeSorting: `title` }\n            })\n            break\n        }\n\n        const sortedPosts = _.sortBy(this.state.posts, [firstSortField, secondSortField])\n\n        this.setState(() => {\n            return { posts: sortedPosts }\n        })\n    }\n\n    render() {\n        const { posts } = this.state\n\n        return (\n            <>\n                <Layout\n                    headerDividerStyle=\"shadow\"\n                    header={\n                        <div className=\"bg-integrations-header-image\">\n                            <div className=\"bg-integrations-header-cover\">\n                                <header className=\"top-0 left-0 right-0 z-9999\">\n                                    <NavBar theme=\"light\" />\n                                </header>\n                                <div className=\"pa-vw4 tc white\">\n                                    <h1 className={`${Spirit.sectionHeading} gh-integration-header-shadow`}>Ghost Integrations</h1>\n                                    <p className={ Spirit.sectionSubHeading }>All your favourite apps and tools, integrated with Ghost</p>\n                                    <IntegrationSearchBox searchActive={this.searchSwitch} />\n                                </div>\n                            </div>\n                        </div>\n                    }\n                >\n                    <IntegrationIndex>\n                        <div className={Spirit.page.xl + `pt10`}>\n                            <div className=\"flex items-start br4\">\n                                <div className=\"gh-integration-sidebar flex-shrink-0 w50 mr5 dn db-ns\">\n                                    <div className=\"flex flex-column mb6\" data-cy=\"sort\">\n                                        <h3 className=\"ma0 mb2\">Sort by</h3>\n                                        <a href=\"#\" className={`link pa2 pl0 ${this.state.activeSorting === `date` ? `blue fw6` : `midgrey`}`} onClick={this.sortBy.bind(this, `date`)}>Most popular</a>\n                                        <a href=\"#\" className={`link pa2 pl0 ${this.state.activeSorting === `title` ? `blue fw6` : `midgrey`}`} onClick={this.sortBy.bind(this, `title`)}>A – Z</a>\n                                    </div>\n                                    <div className=\"flex flex-column mb6\">\n                                        <IntegrationsTagList\n                                            location={this.props.location}\n                                            searchActive={this.state.searchActive}\n                                        />\n                                    </div>\n                                </div>\n                                {this.state.searchActive ?\n                                    <IntegrationResults /> :\n                                    <>\n                                        <div className=\"gh-integrations w-100\">\n                                            {posts.map(({ node }) => (\n                                                <IntegrationBox key={node.id} post={node} section=\"integrations\" />\n                                            ))}\n                                        </div>\n                                    </>\n                                }\n                            </div>\n                        </div>\n                    </IntegrationIndex>\n                </Layout>\n            </>\n        )\n    }\n}\n\nIntegrationsContent.propTypes = {\n    posts: PropTypes.array.isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n}\n\nexport default IntegrationsContent\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\n\nimport { IntegrationsContent } from '../components/integrations'\nimport { MetaData, getMetaImageUrls } from '../components/common/meta'\n\nconst IntegrationsPage = ({ data, location }) => {\n    // Add meta title and description for this page here to overwrite the site meta data as set in the config\n    // const title = `Ghost Integrations – Connect your favourite Tools & Apps to your site`\n    // const description = `Keep your stack aligned and integrate your most used tools & apps with your Ghost site: automation, analytics, marketing, support and much more! 👉`\n    // const imageUrl = getMetaImageUrls(`integrations`)\n\n    // const posts = data.allGhostPost.edges\n\n    // return (\n    //     <>\n    //         <MetaData\n    //             data={data}\n    //             location={location}\n    //             type=\"website\"\n    //             title={title || data.site.siteMetadata.title}\n    //             description={description || data.site.siteMetadata.description}\n    //             image={imageUrl}\n    //         />\n    //         <IntegrationsContent\n    //             posts={posts}\n    //             location={location}\n    //         />\n    //     </>\n    // )\n}\n\nIntegrationsPage.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n        allGhostPost: PropTypes.object.isRequired,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n}\n\nexport default IntegrationsPage\n\nexport const pageQuery = graphql`\n  query GhostIntegrationsQuery {\n    site {\n        ...SiteMetaFields\n    }\n    # allGhostPost(\n    #     sort: { order: ASC, fields: [published_at] },\n    #     limit: 100,\n    #     filter: {tags: {elemMatch: {slug: {eq: \"hash-integration\"}}}}\n    # ) {\n    #   edges {\n    #     node {\n    #       ...GhostPostListFields\n    #     }\n    #   }\n    # }\n  }\n`\n","import _ from 'lodash'\nimport PropTypes from 'prop-types'\n\nexport const getAuthorProperties = (primaryAuthor, fetchAuthorData) => {\n    let authorProfiles = []\n\n    if (fetchAuthorData) {\n        authorProfiles.push(\n            primaryAuthor.website ? primaryAuthor.website : null,\n            primaryAuthor.twitter ? `https://twitter.com/${_.trimStart(primaryAuthor.twitter, `@`)}/` : null,\n            primaryAuthor.facebook ? `https://www.facebook.com/${primaryAuthor.facebook}/` : null\n        )\n    } else {\n        authorProfiles.push(\n            `https://ghost.org/`,\n            `https://twitter.com/ghost/`,\n            `https://www.facebook.com/ghost/`\n        )\n    }\n\n    authorProfiles = _.compact(authorProfiles)\n\n    return {\n        name: fetchAuthorData ? primaryAuthor.name : `Ghost`,\n        sameAsArray: authorProfiles.length ? `[\"${_.join(authorProfiles, `\", \"`)}\"]` : null,\n        image: fetchAuthorData ? primaryAuthor.profile_image : null,\n    }\n}\n\ngetAuthorProperties.defaultProps = {\n    fetchAuthorData: false,\n}\n\ngetAuthorProperties.PropTypes = {\n    primaryAuthor: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        profile_image: PropTypes.string,\n        website: PropTypes.string,\n        twitter: PropTypes.string,\n        facebook: PropTypes.string,\n    }).isRequired,\n    fetchAuthorData: PropTypes.bool.isRequired,\n}\n\nexport default getAuthorProperties\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\n\nconst ImageMeta = ({ image }) => (\n    <Helmet>\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:image\" content={image} />\n        <meta property=\"og:image\" content={image} />\n        {/* These are the image sizes of the SEO feature images */}\n        <meta property=\"og:image:width\" content=\"1000\" />\n        <meta property=\"og:image:height\" content=\"523\" />\n    </Helmet >\n)\n\nImageMeta.propTypes = {\n    image: PropTypes.string.isRequired,\n}\n\nexport default ImageMeta\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\nimport { tags as tagsHelper } from '@tryghost/helpers'\n\nimport getAuthorProperties from './getAuthorProperties'\nimport ImageMeta from './ImageMeta'\n\nconst ArticleMetaGhost = ({ data, canonical, fetchAuthorData, title, overwriteDefaultImage, image }) => {\n    const { ghostPost } = data\n    const { siteMetadata } = data.site\n\n    const author = getAuthorProperties(ghostPost.primary_author, fetchAuthorData)\n    const publicTags = _.map(tagsHelper(ghostPost, { visibility: `public`, fn: tag => tag }), `name`)\n    const primaryTag = publicTags[0] || { name: `General`, slug: `general` }\n    const seoImage = (overwriteDefaultImage && ghostPost.feature_image) ? ghostPost.feature_image : image\n\n    return (\n        <>\n            <Helmet>\n                <title>{ghostPost.meta_title || title || ghostPost.title}</title>\n                <meta name=\"description\" content={ghostPost.meta_description || ghostPost.excerpt} />\n                <link rel=\"canonical\" href={canonical} />\n\n                <meta property=\"og:site_name\" content={siteMetadata.title} />\n                <meta name=\"og:type\" content=\"article\" />\n                <meta name=\"og:title\"\n                    content={\n                        ghostPost.og_title ||\n                        title ||\n                        ghostPost.meta_title ||\n                        ghostPost.title\n                    }\n                />\n                <meta name=\"og:description\"\n                    content={\n                        ghostPost.og_description ||\n                        ghostPost.excerpt ||\n                        ghostPost.meta_description\n                    }\n                />\n                <meta property=\"og:url\" content={canonical} />\n                <meta property=\"article:published_time\" content={ghostPost.published_at} />\n                <meta property=\"article:modified_time\" content={ghostPost.updated_at} />\n                {publicTags.map((keyword, i) => (<meta property=\"article:tag\" content={keyword} key={i} />))}\n                <meta property=\"article:author\" content=\"https://www.facebook.com/ghost/\" />\n\n                <meta name=\"twitter:title\"\n                    content={\n                        ghostPost.twitter_title ||\n                        title ||\n                        ghostPost.meta_title ||\n                        ghostPost.title\n                    }\n                />\n                <meta name=\"twitter:description\"\n                    content={\n                        ghostPost.twitter_description ||\n                        ghostPost.excerpt ||\n                        ghostPost.meta_description\n                    }\n                />\n                <meta name=\"twitter:url\" content={canonical} />\n                {/* <meta name=\"twitter.label1\" content=\"Reading time\" /> */}\n                {/* <meta name=\"twitter:data1\" content=\"TODO: Reading time helper and replace existing `label1` data\" /> */}\n                <meta name=\"twitter:label1\" content=\"Written by\" />\n                <meta name=\"twitter:data1\" content={author.name} />\n                <meta name=\"twitter:label2\" content=\"Filed under\" />\n                <meta name=\"twitter:data2\" content={primaryTag} />\n                <meta name=\"twitter:site\" content=\"@tryghost\" />\n                <meta name=\"twitter:creator\" content=\"@tryghost\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"Article\",\n                        \"author\": {\n                            \"@type\": \"Person\",\n                            \"name\": \"${author.name}\",\n                            ${author.image ? author.sameAsArray ? `\"image\": \"${author.image}\",` : `\"image\": \"${author.image}\"` : ``}\n                            ${author.sameAsArray ? `\"sameAs\": ${author.sameAsArray}` : ``}\n                        },\n                        ${publicTags.length ? `\"keywords\": \"${_.join(publicTags, `, `)}\",` : ``}\n                        \"headline\": \"${ghostPost.meta_title || title || ghostPost.title}\",\n                        \"url\": \"${canonical}\",\n                        \"datePublished\": \"${ghostPost.published_at}\",\n                        \"dateModified\": \"${ghostPost.updated_at}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${seoImage}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"description\": \"${ghostPost.meta_description || ghostPost.excerpt}\",\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${siteMetadata.siteUrl}\"\n                        }\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={seoImage} />\n        </>\n    )\n}\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//         \"name\": \"Ghost\",\n//             \"logo\": {\n//         \"@type\": \"ImageObject\",\n//             \"url\": \"https://blog.ghost.org/favicon.png\",\n//                 \"width\": 60,\n//                     \"height\": 60\n//     }\n// },\n\nArticleMetaGhost.defaultProps = {\n    fetchAuthorData: false,\n}\n\nArticleMetaGhost.propTypes = {\n    data: PropTypes.shape({\n        ghostPost: PropTypes.shape({\n            title: PropTypes.string.isRequired,\n            published_at: PropTypes.string.isRequired,\n            updated_at: PropTypes.string.isRequired,\n            excerpt: PropTypes.string.isRequired,\n            meta_title: PropTypes.string,\n            meta_description: PropTypes.string,\n            primary_author: PropTypes.object.isRequired,\n            feature_image: PropTypes.string,\n            tags: PropTypes.arrayOf(\n                PropTypes.shape({\n                    name: PropTypes.string,\n                    slug: PropTypes.string,\n                    visibility: PropTypes.string,\n                })\n            ),\n            primaryTag: PropTypes.shape({\n                name: PropTypes.string,\n            }),\n            og_title: PropTypes.string,\n            og_description: PropTypes.string,\n            twitter_title: PropTypes.string,\n            twitter_description: PropTypes.string,\n        }).isRequired,\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    fetchAuthorData: PropTypes.bool,\n    title: PropTypes.string,\n    overwriteDefaultImage: PropTypes.bool,\n}\n\nexport default ArticleMetaGhost\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\n\nimport ImageMeta from './ImageMeta'\nimport { getMetaImageUrls } from '.'\n\nconst ArticleMetaMD = ({ data, canonical }) => {\n    const post = data.markdownRemark\n    const fm = post.frontmatter\n    const { siteMetadata } = data.site\n\n    // Convert the frontmatter date into ISO String but, and use a fixed\n    // date, if no date is set. The published date should not change once set.\n    const publishedAtISODate = fm.date ? new Date(fm.date).toISOString() : new Date(`2018-10-15`).toISOString()\n    const primaryTag = fm.keywords && fm.keywords.length ? fm.keywords[0] : null\n    const seoImage = getMetaImageUrls()\n\n    return (\n        <>\n            <Helmet>\n                <title>{fm.meta_title || fm.title}</title>\n                <meta name=\"description\" content={fm.meta_description || post.excerpt} />\n                <link rel=\"canonical\" href={canonical} />\n\n                <meta property=\"og:site_name\" content={siteMetadata.title} />\n                <meta name=\"og:type\" content=\"article\" />\n                <meta name=\"og:title\" content={fm.meta_title || fm.title} />\n                <meta name=\"og:description\" content={fm.meta_description || post.excerpt} />\n                <meta property=\"og:url\" content={canonical} />\n                <meta property=\"article:published_time\" content={publishedAtISODate} />\n                {fm.keywords && fm.keywords.length ? fm.keywords.map((keyword, i) => (<meta property=\"article:tag\" content={keyword} key={i} />)) : null}\n                <meta property=\"article:author\" content=\"https://www.facebook.com/ghost/\" />\n\n                <meta name=\"twitter:title\" content={fm.meta_title || fm.title} />\n                <meta name=\"twitter:description\" content={fm.meta_description || post.excerpt} />\n                <meta name=\"twitter:url\" content={canonical} />\n                <meta name=\"twitter.label1\" content=\"Reading time\" />\n                <meta name=\"twitter:data1\" content={`${post.timeToRead} min read`} />\n                {primaryTag ? <meta name=\"twitter:label2\" content=\"Filed under\" /> : null}\n                {primaryTag ? <meta name=\"twitter:data2\" content={primaryTag} /> : null}\n                <meta name=\"twitter:site\" content=\"@tryghost\" />\n                <meta name=\"twitter:creator\" content=\"@tryghost\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"Article\",\n                        \"author\": {\n                            \"@type\": \"Person\",\n                            \"name\": \"Ghost\",\n                            \"sameAs\": [\n                                \"https://ghost.org/\",\n                                \"https://www.facebook.com/ghost/\",\n                                \"https://twitter.com/tryghost/\"\n                            ]\n                        },\n                        ${fm.keywords && fm.keywords.length ? `\"keywords\": \"${_.join(fm.keywords, `, `)}\",` : ``}\n                        \"headline\": \"${fm.meta_title || fm.title}\",\n                        \"url\": \"${canonical}\",\n                        \"datePublished\": \"${publishedAtISODate}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${seoImage}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"description\": \"${fm.meta_description || post.excerpt}\",\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${siteMetadata.siteUrl}\"\n                        }\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={seoImage} />\n        </>\n    )\n}\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//     \"name\": \"Ghost\",\n//     \"logo\": {\n//         \"@type\": \"ImageObject\",\n//         \"url\": \"https://blog.ghost.org/favicon.png\",\n//         \"width\": 60,\n//         \"height\": 60\n//     }\n// },\n\nArticleMetaMD.propTypes = {\n    data: PropTypes.shape({\n        markdownRemark: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n                title: PropTypes.string.isRequired,\n                keywords: PropTypes.arrayOf(\n                    PropTypes.string,\n                ),\n                meta_title: PropTypes.string,\n                meta_description: PropTypes.string,\n                date: PropTypes.string,\n            }).isRequired,\n            excerpt: PropTypes.string.isRequired,\n            timeToRead: PropTypes.number,\n        }).isRequired,\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n}\n\nexport default ArticleMetaMD\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\n\nimport ImageMeta from './ImageMeta'\n\nconst WebsiteMeta = ({ data, canonical, title, description, image, type }) => (\n        <>\n            <Helmet>\n                <title>{title}</title>\n                <meta name=\"description\" content={description} />\n                <link rel=\"canonical\" href={canonical} />\n                <meta property=\"og:site_name\" content={data.site.siteMetadata.title} />\n                <meta property=\"og:type\" content=\"website\" />\n                <meta property=\"og:title\" content={title} />\n                <meta property=\"og:description\" content={description} />\n                <meta property=\"og:url\" content={canonical} />\n                <meta name=\"twitter:title\" content={title} />\n                <meta name=\"twitter:description\" content={description} />\n                <meta name=\"twitter:url\" content={canonical} />\n                <meta name=\"twitter:site\" content=\"@tryghost\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": ${type && type === `series` ? `\"Series\"` : `\"WebSite\"`},\n                        \"url\": \"${canonical}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${image}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${data.site.siteMetadata.siteUrl}\"\n                        },\n                        \"description\": \"${description}\"\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={image} />\n        </>\n)\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//         \"name\": \"Ghost\",\n//             \"logo\": {\n//         \"@type\": \"ImageObject\",\n//             \"url\": \"https://blog.ghost.org/favicon.png\",\n//                 \"width\": 60,\n//                     \"height\": 60\n//     }\n// },\n\nWebsiteMeta.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    type: PropTypes.oneOf([`website`, `series`]).isRequired,\n}\n\nexport default WebsiteMeta\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport url from 'url'\n\nimport ArticleMetaGhost from './ArticleMetaGhost'\nimport ArticleMetaMD from './ArticleMetaMD'\nimport WebsiteMeta from './WebsiteMeta'\n\nconst MetaData = ({\n    data,\n    type,\n    title,\n    description,\n    image,\n    fetchAuthorData,\n    overwriteDefaultImage,\n    location,\n}) => {\n    const { ghostPost, markdownRemark } = data || {}\n    const { siteMetadata } = data.site\n\n    const canonical = url.resolve(siteMetadata.siteUrl, location.pathname, `/`)\n\n    if (type === `article`) {\n        if (ghostPost) {\n            return (\n                <ArticleMetaGhost\n                    data={data}\n                    canonical={canonical}\n                    fetchAuthorData={fetchAuthorData}\n                    title={title}\n                    image={image}\n                    overwriteDefaultImage={overwriteDefaultImage}\n                />\n            )\n        } else if (markdownRemark) {\n            return (\n                <ArticleMetaMD\n                    data={data}\n                    canonical={canonical}\n                />\n            )\n        }\n    } else if (type === `website` || type === `series`) {\n        return (\n            <WebsiteMeta\n                data={data}\n                canonical={canonical}\n                title={title}\n                description={description}\n                image={image}\n                type={type}\n            />\n        )\n    }\n\n    return null\n}\n\nMetaData.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n        ghostPost: PropTypes.object,\n        markdownRemark: PropTypes.object,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n    type: PropTypes.oneOf([`website`, `series`, `article`]).isRequired,\n    title: PropTypes.string,\n    description: PropTypes.string,\n    image: PropTypes.string,\n    fetchAuthorData: PropTypes.bool,\n    overwriteDefaultImage: PropTypes.bool,\n}\n\nexport default MetaData\n","import PropTypes from 'prop-types'\nimport url from 'url'\n\n// TODO: this should be available as global var without the need to query\n// the siteMetadata.\nconst SITEURL = process.env.SITE_URL || `https://docs.inspireui.com`\n\nconst imageUrls = {\n    faq: url.resolve(SITEURL, `/images/meta/Ghost-FAQ.jpg`),\n    integrations: url.resolve(SITEURL, `/images/meta/Ghost-Integrations.jpg`),\n    tutorials: url.resolve(SITEURL, `/images/meta/Ghost-Tutorials.jpg`),\n    default: url.resolve(SITEURL, `/images/meta/Ghost-Docs.jpg`),\n}\n\nexport const getMetaImageUrls = (section) => {\n    // Set the default image if no section is passed\n    section = section || `default`\n\n    return imageUrls[section]\n}\n\ngetMetaImageUrls.proptypes = {\n    section: PropTypes.string.isRequired,\n}\n\nexport default getMetaImageUrls\n\n","export { default as MetaData } from './MetaData'\nexport { default as getMetaImageUrls } from './getMetaImageUrls'\n"],"sourceRoot":""}