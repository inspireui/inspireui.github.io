{"version":3,"sources":["webpack:///./src/components/api/APICard.js","webpack:///./src/pages/resources.js","webpack:///./src/components/common/meta/getAuthorProperties.js","webpack:///./src/components/common/meta/ImageMeta.js","webpack:///./src/components/common/meta/ArticleMetaGhost.js","webpack:///./src/components/common/meta/ArticleMetaMD.js","webpack:///./src/components/common/meta/WebsiteMeta.js","webpack:///./src/components/common/meta/MetaData.js","webpack:///./src/components/common/meta/getMetaImageUrls.js","webpack:///./src/components/common/meta/index.js"],"names":["APICard","to","href","icon","img","iconClass","children","className","elevation","name","src","propTypes","PropTypes","string","node","isRequired","APIPage","data","location","imageUrl","getMetaImageUrls","sectionStyles","type","title","description","image","mainClass","bodyClass","Spirit","page","xl","sectionHeading","sectionSubHeading","l","id","h3","small","shape","site","siteMetadata","siteUrl","pathname","pageQuery","getAuthorProperties","primaryAuthor","fetchAuthorData","authorProfiles","push","website","twitter","_","trimStart","facebook","compact","sameAsArray","length","join","profile_image","defaultProps","bool","ImageMeta","content","property","ArticleMetaGhost","canonical","overwriteDefaultImage","ghostPost","author","primary_author","publicTags","map","tagsHelper","visibility","fn","tag","primaryTag","slug","seoImage","feature_image","meta_title","meta_description","excerpt","rel","og_title","og_description","published_at","updated_at","keyword","i","key","twitter_title","twitter_description","object","tags","arrayOf","ArticleMetaMD","post","markdownRemark","fm","frontmatter","publishedAtISODate","date","Date","toISOString","keywords","timeToRead","number","WebsiteMeta","oneOf","MetaData","url","resolve","SITEURL","process","imageUrls","faq","integrations","tutorials","default","section","proptypes"],"mappings":"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","file":"component---src-pages-resources-js-659f9e099398678f85b5.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Icon, Box } from '../common'\n\nconst APICard = ({ to, href, icon, img, iconClass, children }) => (\n    <Box\n        to={to || null}\n        href={href}\n        className=\"br4 flex flex-column justify-between items-center middarkgrey pa2 pt8 pb5 tdn\"\n        elevation={!href && !to ? `1` : `2`}\n    >\n        {icon ? <div className=\"w10 h10 flex justify-center items-center\"><Icon name={icon} className={`w10 h10 mb4 ${iconClass}`}></Icon></div> : null}\n        {img ? <div className=\"w10 h10 flex justify-center items-center\"><img src={img} className=\"nudge-bottom--4\" /></div> : null}\n        <span className={(!to && !href ? `o-50` : ``)}>{children}</span>\n    </Box>\n)\n\nAPICard.propTypes = {\n    to: PropTypes.string,\n    href: PropTypes.string,\n    icon: PropTypes.string,\n    img: PropTypes.string,\n    iconClass: PropTypes.string,\n    children: PropTypes.node.isRequired,\n}\n\nexport default APICard\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\n\nimport { Spirit } from '../styles/spirit-styles'\nimport { Layout } from '../components/common/layout'\nimport { APICard } from '../components/api'\nimport { MetaData, getMetaImageUrls } from '../components/common/meta'\n\nconst APIPage = ({ data, location }) => {\n    // Add meta title and description or this page here to overwrite the site meta data as set in the config\n    const title = `Common Resources`\n    const description = `Collections of useful links and demo app via Appstore or Google Play store`\n    const imageUrl = getMetaImageUrls()\n\n    const sectionStyles = {\n        headingContainer: `col-12 col-4-ns mr10-ns`,\n        cardContainer: `col-12 col-8-ns mt-vw4 mt0-ns grid-icon-boxes`,\n    }\n\n    return (\n        <>\n            <MetaData\n                data={data}\n                location={location}\n                type=\"website\"\n                title={title}\n                description={description}\n                image={imageUrl}\n            />\n            <Layout mainClass=\"bg-whitegrey-l2\" bodyClass=\"bg-white\">\n                <section className=\"bg-api-reference\">\n                    <div className={`${Spirit.page.xl} tc-ns pt-vw6 pt-vw5-ns pb-vw5 white`}>\n                        <h1 className={`${Spirit.sectionHeading} gh-integration-header-shadow`}>Common Resources</h1>\n                        <p className={Spirit.sectionSubHeading}>Collections of useful links and resource form InspireUI</p>\n                    </div>\n                </section>\n\n                <div className={`${Spirit.page.l} pb-vw4 pb-vw3-ns pt-vw4 pt-vw3-ns`}>\n                    <div className=\"grid-12\">\n                        <div className={sectionStyles.headingContainer}>\n                            <h2 id=\"frontend-sdk\" className={`${Spirit.h3} pt20 nt20`}>Reference</h2>\n                            <p className={`${Spirit.small} midgrey-l2 mt2`}>Common useful links you may like to explore from our product</p>\n                        </div>\n                        <div className={sectionStyles.cardContainer}>\n                            <APICard href=\"https://www.dropbox.com/sh/gq9la1uk5tztp1v/AAAjVByMxpLmvYd_XYDjNLApa?dl=0\" icon=\"ic-dropbox\">CeBuilder</APICard>\n                            <APICard href=\"https://www.youtube.com/inspireui?sub_confirmation=1\" icon=\"ic-youtube\">Youtube</APICard>\n                            <APICard href=\"https://www.youtube.com/inspireui?sub_confirmation=1\" icon=\"ic-git\">Ticket Support</APICard>\n                            {/* <APICard to=\"/api/gatsby/\" icon=\"gatsby-logo\">Gatsby</APICard> */}\n                        </div>\n                    </div>\n\n                    <div className=\"grid-12 mt-vw4 mt20-ns\">\n                        <div className={sectionStyles.headingContainer}>\n                            <h2 id=\"rest-api\" className={`${Spirit.h3} pt20 nt20`}>Demo</h2>\n                            <p className={`${Spirit.small} midgrey-l2 mt2`}>Resource link for the demo app</p>\n                        </div>\n                        <div className={sectionStyles.cardContainer}>\n                            <APICard href=\"https://itunes.apple.com/br/developer/inspireui-company-limited/id1192736196?l=en\" icon=\"ic-ios2\">AppStore</APICard>\n                            <APICard href=\"https://play.google.com/store/apps/developer?id=InspireUI\" icon=\"ic-android2\">Google Play</APICard>\n                            <APICard href=\"https://expo.io/@inspireui-demo\" icon=\"ic-expo\">Expo</APICard> \n                        </div>\n                    </div>\n\n                    <div className=\"grid-12 mt-vw4 mt20-ns\">\n                        <div className={sectionStyles.headingContainer}>\n                            <h2 id=\"rest-api\" className={`${Spirit.h3} pt20 nt20`}>Products</h2>\n                            <p className={`${Spirit.small} midgrey-l2 mt2`}>Explore more detail info from the product</p>\n                        </div>\n                        <div className={sectionStyles.cardContainer}>\n                            <APICard href=\"https://inspireui.com/about\" icon=\"ic-web\">inspireui.com</APICard>\n                            <APICard href=\"https://mstore.io\" icon=\"ic-web\">mstore.io</APICard> \n                        </div>\n                    </div>\n\n\n                    <div className=\"grid-12 mt-vw4 mt20-ns\">\n                        <div className={sectionStyles.headingContainer}>\n                            <h2 id=\"tools\" className={`${Spirit.h3} pt20 nt20`}>Development Tools</h2>\n                            <p className={`${Spirit.small} midgrey-l2 mt2`}>Utilities to help build and develop React Native app</p>\n                        </div>\n                        <div className={sectionStyles.cardContainer}>\n                            <APICard href=\"https://github.com/infinitered/reactotron/releases\" icon=\"ghost-cli-logo\">Reactotron</APICard>\n                            <APICard href=\"https://github.com/jhen0409/react-native-debugger/releases\" icon=\"ghost-cli-logo\">RN Debugger</APICard>\n                            <APICard href=\"https://code.visualstudio.com/\" icon=\"visual-code\">Visual Code</APICard>\n        \n                            {/* <APICard to=\"/api/javascript/sdk/\" icon=\"javascript-logo\">JavaScript SDK</APICard> */}\n                        </div>\n                    </div>\n\n                    {/* <div className=\"grid-12 mt-vw4 mt20-ns\">\n                        <div className={sectionStyles.headingContainer}>\n                            <h2 id=\"client-libraries\" className={`${Spirit.h3} pt20 nt18`}>Client Libraries</h2>\n                            <p className={`${Spirit.small} midgrey-l2 mt2`}>Specific libraries for interacting with the Ghost API directly</p>\n                            <h4 className=\"f-supersmall dib ma0 pa0 bg-green pa1 br-pill pl3 pr3 tc white mt2 nudge-top--2\">Coming soon</h4>\n                        </div>\n                        <div className={sectionStyles.cardContainer}>\n                            <APICard to=\"/api/javascript/\" icon=\"javascript-logo\">JavaScript</APICard>\n                            <APICard icon=\"ruby-logo\" iconClass=\"stroke-midlightgrey o-30\">Ruby</APICard>\n                            <APICard icon=\"php-logo\" iconClass=\"stroke-midlightgrey o-30\">PHP</APICard>\n                            <APICard icon=\"python-logo\" iconClass=\"stroke-midlightgrey o-30\">Python</APICard>\n                            <APICard icon=\"apple-logo\" iconClass=\"stroke-midlightgrey o-30\">iOS</APICard>\n                            <APICard icon=\"android-logo\" iconClass=\"stroke-midlightgrey o-30\">Android</APICard>\n                        </div>\n                    </div> */}\n                </div>\n            </Layout>\n        </>\n    )\n}\n\nAPIPage.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n}\n\nexport default APIPage\n\nexport const pageQuery = graphql`\n    query {\n        site {\n            ...SiteMetaFields\n        }\n    }\n`\n","import _ from 'lodash'\nimport PropTypes from 'prop-types'\n\nexport const getAuthorProperties = (primaryAuthor, fetchAuthorData) => {\n    let authorProfiles = []\n\n    if (fetchAuthorData) {\n        authorProfiles.push(\n            primaryAuthor.website ? primaryAuthor.website : null,\n            primaryAuthor.twitter ? `https://twitter.com/${_.trimStart(primaryAuthor.twitter, `@`)}/` : null,\n            primaryAuthor.facebook ? `https://www.facebook.com/${primaryAuthor.facebook}/` : null\n        )\n    } else {\n        authorProfiles.push(\n            `https://inspireui.com/`,\n            `https://twitter.com/inspireui/`,\n            `https://www.facebook.com/inspireui/`\n        )\n    }\n\n    authorProfiles = _.compact(authorProfiles)\n\n    return {\n        name: fetchAuthorData ? primaryAuthor.name : `Ghost`,\n        sameAsArray: authorProfiles.length ? `[\"${_.join(authorProfiles, `\", \"`)}\"]` : null,\n        image: fetchAuthorData ? primaryAuthor.profile_image : null,\n    }\n}\n\ngetAuthorProperties.defaultProps = {\n    fetchAuthorData: false,\n}\n\ngetAuthorProperties.PropTypes = {\n    primaryAuthor: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        profile_image: PropTypes.string,\n        website: PropTypes.string,\n        twitter: PropTypes.string,\n        facebook: PropTypes.string,\n    }).isRequired,\n    fetchAuthorData: PropTypes.bool.isRequired,\n}\n\nexport default getAuthorProperties\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\n\nconst ImageMeta = ({ image }) => (\n    <Helmet>\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:image\" content={image} />\n        <meta property=\"og:image\" content={image} />\n        {/* These are the image sizes of the SEO feature images */}\n        <meta property=\"og:image:width\" content=\"1000\" />\n        <meta property=\"og:image:height\" content=\"523\" />\n    </Helmet >\n)\n\nImageMeta.propTypes = {\n    image: PropTypes.string.isRequired,\n}\n\nexport default ImageMeta\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\nimport { tags as tagsHelper } from '@tryghost/helpers'\n\nimport getAuthorProperties from './getAuthorProperties'\nimport ImageMeta from './ImageMeta'\n\nconst ArticleMetaGhost = ({ data, canonical, fetchAuthorData, title, overwriteDefaultImage, image }) => {\n    const { ghostPost } = data\n    const { siteMetadata } = data.site\n\n    const author = getAuthorProperties(ghostPost.primary_author, fetchAuthorData)\n    const publicTags = _.map(tagsHelper(ghostPost, { visibility: `public`, fn: tag => tag }), `name`)\n    const primaryTag = publicTags[0] || { name: `General`, slug: `general` }\n    const seoImage = (overwriteDefaultImage && ghostPost.feature_image) ? ghostPost.feature_image : image\n\n    return (\n        <>\n            <Helmet>\n                <title>{ghostPost.meta_title || title || ghostPost.title}</title>\n                <meta name=\"description\" content={ghostPost.meta_description || ghostPost.excerpt} />\n                <link rel=\"canonical\" href={canonical} />\n\n                <meta property=\"og:site_name\" content={siteMetadata.title} />\n                <meta name=\"og:type\" content=\"article\" />\n                <meta name=\"og:title\"\n                    content={\n                        ghostPost.og_title ||\n                        title ||\n                        ghostPost.meta_title ||\n                        ghostPost.title\n                    }\n                />\n                <meta name=\"og:description\"\n                    content={\n                        ghostPost.og_description ||\n                        ghostPost.excerpt ||\n                        ghostPost.meta_description\n                    }\n                />\n                <meta property=\"og:url\" content={canonical} />\n                <meta property=\"article:published_time\" content={ghostPost.published_at} />\n                <meta property=\"article:modified_time\" content={ghostPost.updated_at} />\n                {publicTags.map((keyword, i) => (<meta property=\"article:tag\" content={keyword} key={i} />))}\n                <meta property=\"article:author\" content=\"https://www.facebook.com/ghost/\" />\n\n                <meta name=\"twitter:title\"\n                    content={\n                        ghostPost.twitter_title ||\n                        title ||\n                        ghostPost.meta_title ||\n                        ghostPost.title\n                    }\n                />\n                <meta name=\"twitter:description\"\n                    content={\n                        ghostPost.twitter_description ||\n                        ghostPost.excerpt ||\n                        ghostPost.meta_description\n                    }\n                />\n                <meta name=\"twitter:url\" content={canonical} />\n                {/* <meta name=\"twitter.label1\" content=\"Reading time\" /> */}\n                {/* <meta name=\"twitter:data1\" content=\"TODO: Reading time helper and replace existing `label1` data\" /> */}\n                <meta name=\"twitter:label1\" content=\"Written by\" />\n                <meta name=\"twitter:data1\" content={author.name} />\n                <meta name=\"twitter:label2\" content=\"Filed under\" />\n                <meta name=\"twitter:data2\" content={primaryTag} />\n                <meta name=\"twitter:site\" content=\"@tryghost\" />\n                <meta name=\"twitter:creator\" content=\"@tryghost\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"Article\",\n                        \"author\": {\n                            \"@type\": \"Person\",\n                            \"name\": \"${author.name}\",\n                            ${author.image ? author.sameAsArray ? `\"image\": \"${author.image}\",` : `\"image\": \"${author.image}\"` : ``}\n                            ${author.sameAsArray ? `\"sameAs\": ${author.sameAsArray}` : ``}\n                        },\n                        ${publicTags.length ? `\"keywords\": \"${_.join(publicTags, `, `)}\",` : ``}\n                        \"headline\": \"${ghostPost.meta_title || title || ghostPost.title}\",\n                        \"url\": \"${canonical}\",\n                        \"datePublished\": \"${ghostPost.published_at}\",\n                        \"dateModified\": \"${ghostPost.updated_at}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${seoImage}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"description\": \"${ghostPost.meta_description || ghostPost.excerpt}\",\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${siteMetadata.siteUrl}\"\n                        }\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={seoImage} />\n        </>\n    )\n}\n\nArticleMetaGhost.defaultProps = {\n    fetchAuthorData: false,\n}\n\nArticleMetaGhost.propTypes = {\n    data: PropTypes.shape({\n        ghostPost: PropTypes.shape({\n            title: PropTypes.string.isRequired,\n            published_at: PropTypes.string.isRequired,\n            updated_at: PropTypes.string.isRequired,\n            excerpt: PropTypes.string.isRequired,\n            meta_title: PropTypes.string,\n            meta_description: PropTypes.string,\n            primary_author: PropTypes.object.isRequired,\n            feature_image: PropTypes.string,\n            tags: PropTypes.arrayOf(\n                PropTypes.shape({\n                    name: PropTypes.string,\n                    slug: PropTypes.string,\n                    visibility: PropTypes.string,\n                })\n            ),\n            primaryTag: PropTypes.shape({\n                name: PropTypes.string,\n            }),\n            og_title: PropTypes.string,\n            og_description: PropTypes.string,\n            twitter_title: PropTypes.string,\n            twitter_description: PropTypes.string,\n        }).isRequired,\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    fetchAuthorData: PropTypes.bool,\n    title: PropTypes.string,\n    overwriteDefaultImage: PropTypes.bool,\n}\n\nexport default ArticleMetaGhost\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\n\nimport ImageMeta from './ImageMeta'\nimport { getMetaImageUrls } from '.'\n\nconst ArticleMetaMD = ({ data, canonical }) => {\n    const post = data.markdownRemark\n    const fm = post.frontmatter\n    const { siteMetadata } = data.site\n\n    // Convert the frontmatter date into ISO String but, and use a fixed\n    // date, if no date is set. The published date should not change once set.\n    const publishedAtISODate = fm.date ? new Date(fm.date).toISOString() : new Date(`2018-10-15`).toISOString()\n    const primaryTag = fm.keywords && fm.keywords.length ? fm.keywords[0] : null\n    const seoImage = getMetaImageUrls()\n\n    return (\n        <>\n            <Helmet>\n                <title>{fm.meta_title || fm.title}</title>\n                <meta name=\"description\" content={fm.meta_description || post.excerpt} />\n                <link rel=\"canonical\" href={canonical} />\n\n                <meta property=\"og:site_name\" content={siteMetadata.title} />\n                <meta name=\"og:type\" content=\"article\" />\n                <meta name=\"og:title\" content={fm.meta_title || fm.title} />\n                <meta name=\"og:description\" content={fm.meta_description || post.excerpt} />\n                <meta property=\"og:url\" content={canonical} />\n                <meta property=\"article:published_time\" content={publishedAtISODate} />\n                {fm.keywords && fm.keywords.length ? fm.keywords.map((keyword, i) => (<meta property=\"article:tag\" content={keyword} key={i} />)) : null}\n                <meta property=\"article:author\" content=\"https://www.facebook.com/ghost/\" />\n\n                <meta name=\"twitter:title\" content={fm.meta_title || fm.title} />\n                <meta name=\"twitter:description\" content={fm.meta_description || post.excerpt} />\n                <meta name=\"twitter:url\" content={canonical} />\n                <meta name=\"twitter.label1\" content=\"Reading time\" />\n                <meta name=\"twitter:data1\" content={`${post.timeToRead} min read`} />\n                {primaryTag ? <meta name=\"twitter:label2\" content=\"Filed under\" /> : null}\n                {primaryTag ? <meta name=\"twitter:data2\" content={primaryTag} /> : null}\n                <meta name=\"twitter:site\" content=\"@tryghost\" />\n                <meta name=\"twitter:creator\" content=\"@tryghost\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"Article\",\n                        \"author\": {\n                            \"@type\": \"Person\",\n                            \"name\": \"Ghost\",\n                            \"sameAs\": [\n                                \"https://inspireui.com/\",\n                                \"https://www.facebook.com/inspireui/\",\n                                \"https://twitter.com/inspireui/\"\n                            ]\n                        },\n                        ${fm.keywords && fm.keywords.length ? `\"keywords\": \"${_.join(fm.keywords, `, `)}\",` : ``}\n                        \"headline\": \"${fm.meta_title || fm.title}\",\n                        \"url\": \"${canonical}\",\n                        \"datePublished\": \"${publishedAtISODate}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${seoImage}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"description\": \"${fm.meta_description || post.excerpt}\",\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${siteMetadata.siteUrl}\"\n                        }\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={seoImage} />\n        </>\n    )\n}\n\nArticleMetaMD.propTypes = {\n    data: PropTypes.shape({\n        markdownRemark: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n                title: PropTypes.string.isRequired,\n                keywords: PropTypes.arrayOf(\n                    PropTypes.string,\n                ),\n                meta_title: PropTypes.string,\n                meta_description: PropTypes.string,\n                date: PropTypes.string,\n            }).isRequired,\n            excerpt: PropTypes.string.isRequired,\n            timeToRead: PropTypes.number,\n        }).isRequired,\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n}\n\nexport default ArticleMetaMD\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\n\nimport ImageMeta from './ImageMeta'\n\nconst WebsiteMeta = ({ data, canonical, title, description, image, type }) => (\n        <>\n            <Helmet>\n                <title>{title}</title>\n                <meta name=\"description\" content={description} />\n                <link rel=\"canonical\" href={canonical} />\n                <meta property=\"og:site_name\" content={data.site.siteMetadata.title} />\n                <meta property=\"og:type\" content=\"website\" />\n                <meta property=\"og:title\" content={title} />\n                <meta property=\"og:description\" content={description} />\n                <meta property=\"og:url\" content={canonical} />\n                <meta name=\"twitter:title\" content={title} />\n                <meta name=\"twitter:description\" content={description} />\n                <meta name=\"twitter:url\" content={canonical} />\n                <meta name=\"twitter:site\" content=\"@tryghost\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": ${type && type === `series` ? `\"Series\"` : `\"WebSite\"`},\n                        \"url\": \"${canonical}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${image}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${data.site.siteMetadata.siteUrl}\"\n                        },\n                        \"description\": \"${description}\"\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={image} />\n        </>\n)\n\n\nWebsiteMeta.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    type: PropTypes.oneOf([`website`, `series`]).isRequired,\n}\n\nexport default WebsiteMeta\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport url from 'url'\n\nimport ArticleMetaGhost from './ArticleMetaGhost'\nimport ArticleMetaMD from './ArticleMetaMD'\nimport WebsiteMeta from './WebsiteMeta'\n\nconst MetaData = ({\n    data,\n    type,\n    title,\n    description,\n    image,\n    fetchAuthorData,\n    overwriteDefaultImage,\n    location,\n}) => {\n    const { ghostPost, markdownRemark } = data || {}\n    const { siteMetadata } = data.site\n\n    const canonical = url.resolve(siteMetadata.siteUrl, location.pathname, `/`)\n\n    if (type === `article`) {\n        if (ghostPost) {\n            return (\n                <ArticleMetaGhost\n                    data={data}\n                    canonical={canonical}\n                    fetchAuthorData={fetchAuthorData}\n                    title={title}\n                    image={image}\n                    overwriteDefaultImage={overwriteDefaultImage}\n                />\n            )\n        } else if (markdownRemark) {\n            return (\n                <ArticleMetaMD\n                    data={data}\n                    canonical={canonical}\n                />\n            )\n        }\n    } else if (type === `website` || type === `series`) {\n        return (\n            <WebsiteMeta\n                data={data}\n                canonical={canonical}\n                title={title}\n                description={description}\n                image={image}\n                type={type}\n            />\n        )\n    }\n\n    return null\n}\n\nMetaData.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n        ghostPost: PropTypes.object,\n        markdownRemark: PropTypes.object,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n    type: PropTypes.oneOf([`website`, `series`, `article`]).isRequired,\n    title: PropTypes.string,\n    description: PropTypes.string,\n    image: PropTypes.string,\n    fetchAuthorData: PropTypes.bool,\n    overwriteDefaultImage: PropTypes.bool,\n}\n\nexport default MetaData\n","import PropTypes from 'prop-types'\nimport url from 'url'\n\n// TODO: this should be available as global var without the need to query\n// the siteMetadata.\nconst SITEURL = process.env.SITE_URL || `https://docs.inspireui.com`\n\nconst imageUrls = {\n    faq: url.resolve(SITEURL, `/images/meta/Ghost-FAQ.jpg`),\n    integrations: url.resolve(SITEURL, `/images/meta/Ghost-Integrations.jpg`),\n    tutorials: url.resolve(SITEURL, `/images/meta/Ghost-Tutorials.jpg`),\n    default: url.resolve(SITEURL, `/images/meta/Ghost-Docs.jpg`),\n}\n\nexport const getMetaImageUrls = (section) => {\n    // Set the default image if no section is passed\n    section = section || `default`\n\n    return imageUrls[section]\n}\n\ngetMetaImageUrls.proptypes = {\n    section: PropTypes.string.isRequired,\n}\n\nexport default getMetaImageUrls\n\n","export { default as MetaData } from './MetaData'\nexport { default as getMetaImageUrls } from './getMetaImageUrls'\n"],"sourceRoot":""}